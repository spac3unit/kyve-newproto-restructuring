syntax = "proto3";

package kyve.registry.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "kyve/registry/v1beta1/registry.proto";

option go_package = "github.com/KYVENetwork/chain/x/registry/types";

// Query defines the gRPC registry querier service.
service Query {
  // PARAMS


  // POOL

  // Pool queries a pool by ID.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/pool/{id}";
  }

  // Pools queries for all pools.
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/pools";
  }

  // FundersList returns all funder addresses with their corresponding funding amount for a given pool
  rpc FundersList(QueryFundersListRequest) returns (QueryFundersListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/funders_list/{pool_id}";
  }

  // Funder returns all funder info
  rpc Funder(QueryFunderRequest) returns (QueryFunderResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/funder/{pool_id}/{funder}";
  }

  // StakersList returns all staker addresses with their corresponding staking amount for a given pool
  rpc StakersList(QueryStakersListRequest) returns (QueryStakersListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/stakers_list/{pool_id}";
  }

  // Staker returns all staker info
  rpc Staker(QueryStakerRequest) returns (QueryStakerResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/staker/{pool_id}/{staker}";
  }

  // VoteStatus returns all vote info
  rpc VoteStatus(QueryVoteStatusRequest) returns (QueryVoteStatusResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/vote_status/{pool_id}";
  }

  // WARP

  // Proposal ...
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposal/{storage_id}";
  }

  // Proposals ...
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option deprecated = true;
    option (google.api.http).get = "/kyve/registry/v1beta1/proposals/{pool_id}";
  }

  // ProposalByHeight ...
  rpc ProposalByHeight(QueryProposalByHeightRequest) returns (QueryProposalByHeightResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposal_by_height/{pool_id}/{height}";
  }

  // ProposalSinceFinalizedAt ...
  rpc ProposalSinceFinalizedAt(QueryProposalSinceFinalizedAtRequest) returns (QueryProposalSinceFinalizedAtResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposal_since_finalized_at/{pool_id}/{finalized_at}";
  }

  // ProposalSinceId ...
  rpc ProposalSinceId(QueryProposalSinceIdRequest) returns (QueryProposalSinceIdResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposal_since_id/{pool_id}/{id}";
  }

  // PROTOCOL NODE - FLOW

  // CanPropose ...
  rpc CanPropose(QueryCanProposeRequest) returns (QueryCanProposeResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/can_propose/{pool_id}/{proposer}/{from_height}";
  }

  // CanVote checks if voter on pool can still vote for the given bundle
  rpc CanVote(QueryCanVoteRequest) returns (QueryCanVoteResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/can_vote/{pool_id}/{voter}/{storage_id}";
  }

  // StakeInfo returns necessary information to become a staker (used by the protocol nodes)
  rpc StakeInfo(QueryStakeInfoRequest) returns (QueryStakeInfoResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/stake_info/{pool_id}/{staker}";
  }

  // STATS FOR USER ACCOUNT

  // AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc.
  rpc AccountAssets(QueryAccountAssetsRequest) returns (QueryAccountAssetsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_assets/{address}";
  }

  // AccountStakingUnbondings ...
  rpc AccountStakingUnbondings(QueryAccountStakingUnbondingsRequest) returns (QueryAccountStakingUnbondingsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_staking_unbondings/{address}";
  }

  // AccountDelegationUnbondings ...
  rpc AccountDelegationUnbondings(QueryAccountDelegationUnbondingsRequest) returns (QueryAccountDelegationUnbondingsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_delegation_unbondings/{address}";
  }

  // AccountFundedList returns all pools the given user has funded into.
  rpc AccountFundedList(QueryAccountFundedListRequest) returns (QueryAccountFundedListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_funded_list/{address}";
  }

  // AccountStakedList ...
  rpc AccountStakedList(QueryAccountStakedListRequest) returns (QueryAccountStakedListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_staked_list/{address}";
  }

  // AccountDelegationList ...
  rpc AccountDelegationList(QueryAccountDelegationListRequest) returns (QueryAccountDelegationListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_delegation_list/{address}";
  }

  // AccountRedelegation ...
  rpc AccountRedelegation(QueryAccountRedelegationRequest) returns (QueryAccountRedelegationResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_redelegation/{address}";
  }

  // DELEGATION

  // Delegator returns all delegation info
  rpc Delegator(QueryDelegatorRequest) returns (QueryDelegatorResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/delegator/{pool_id}/{staker}/{delegator}";
  }

  // DelegatorsByPoolAndStaker ...
  rpc DelegatorsByPoolAndStaker(QueryDelegatorsByPoolAndStakerRequest) returns (QueryDelegatorsByPoolAndStakerResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/delegators_by_pool_and_staker/{pool_id}/{staker}";
  }

  // StakersByPoolAndDelegator ...
  rpc StakersByPoolAndDelegator(QueryStakersByPoolAndDelegatorRequest) returns (QueryStakersByPoolAndDelegatorResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/stakers_by_pool_and_delegator/{pool_id}/{delegator}";
  }
}

// ######################
// =====   PARAMS   =====
// ######################


// ######################
// =====    POOL    =====
// ######################

// QueryPoolRequest is the request type for the Query/Pool RPC method.
message QueryPoolRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
}

// QueryPoolResponse is the response type for the Query/Pool RPC method.
message QueryPoolResponse {
  // pool ...
  kyve.registry.v1beta1.Pool pool = 1 [(gogoproto.nullable) = false];
}

// QueryPoolsRequest is the request type for the Query/Pools RPC method.
message QueryPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // search ...
  string search = 2;
  // runtime ...
  string runtime = 3;
  // paused ...
  bool paused = 4;
}

// QueryPoolsResponse is the response type for the Query/Pools RPC method.
message QueryPoolsResponse {
  // pools ...
  repeated kyve.registry.v1beta1.Pool pools = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFundersListRequest is the request type for the Query/FundersList RPC method.
message QueryFundersListRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
}

// QueryFundersListResponse is the response type for the Query/FundersList RPC method.
message QueryFundersListResponse {
  // funders ...
  repeated kyve.registry.v1beta1.Funder funders = 1;
}

// QueryFunderRequest is the request type for the Query/Funder RPC method.
message QueryFunderRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // funder
  string funder = 2;
}

// QueryFunderResponse is the response type for the Query/Funder RPC method.
message QueryFunderResponse {
  // funder ...
  kyve.registry.v1beta1.Funder funder = 1;
}

// QueryStakersListRequest is the request type for the Query/StakersList RPC method.
message QueryStakersListRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // status ...
  StakerStatus status = 2;
  // pagination ...
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryStakersListResponse is the response type for the Query/StakersList RPC method.
message QueryStakersListResponse {
  // stakers ...
  repeated kyve.registry.v1beta1.StakerResponse stakers = 1;
  // pagination ...
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryStakerRequest is the request type for the Query/Staker RPC method.
message QueryStakerRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // staker ...
  string staker = 2;
}

// QueryStakerResponse is the response type for the Query/Staker RPC method.
message QueryStakerResponse {
  // staker ...
  kyve.registry.v1beta1.StakerResponse staker = 1;
}

// PendingCommissionChange ...
message PendingCommissionChange {
  // new_commission ...
  string new_commission = 1;
  // creation_date ...
  int64 creation_date = 2;
  // finish_date ...
  int64 finish_date = 3;
}

// StakerResponse ...
message StakerResponse {
  // staker ...
  string staker = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // account ...
  string account = 3;
  // amount ...
  uint64 amount = 4;
  // total_delegation ...
  uint64 total_delegation = 5;
  // commission ...
  string commission = 6;
  // moniker ...
  string moniker = 7;
  // website ...
  string website = 8;
  // logo
  string logo = 9;
  // points
  uint64 points = 10;
  // unbonding_amount ...
  uint64 unbonding_amount = 11;
  // upload_probability
  string upload_probability = 12;
  // status
  StakerStatus status = 13;
  // pending_commission_change
  PendingCommissionChange pending_commission_change = 14;
}

// QueryVoteStatusRequest is the request type for the Query/VoteStatus RPC method.
message QueryVoteStatusRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
}

// QueryVoteStatusResponse is the response type for the Query/VoteStatus RPC method.
message QueryVoteStatusResponse {
  // staker ...
  kyve.registry.v1beta1.VoteStatusResponse vote_status = 1;
}

// VoteStatusResponse ...
message VoteStatusResponse {
  // valid ...
  uint64 valid = 1;
  // invalid ...
  uint64 invalid = 2;
  // abstain ...
  uint64 abstain = 3;
  // total ...
  uint64 total = 4;
}

// ######################
// =====    WARP    =====
// ######################

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // storage_id ...
  string storage_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  // proposal ...
  kyve.registry.v1beta1.Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC method.
message QueryProposalsResponse {
  // proposals ...
  repeated kyve.registry.v1beta1.Proposal proposals = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProposalByHeightRequest is the request type for the Query/ProposalByHeight RPC method.
message QueryProposalByHeightRequest {
  // pool_id ...
  uint64 pool_id = 1;
  // height ...
  uint64 height = 2;
}

// QueryProposalResponse is the response type for the Query/ProposalByHeight RPC method.
message QueryProposalByHeightResponse {
  // proposal ...
  kyve.registry.v1beta1.Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalByFinalizedAtRequest ...
message QueryProposalSinceFinalizedAtRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // height ...
  uint64 finalized_at = 3;
}

// QueryProposalByFinalizedAtResponse ...
message QueryProposalSinceFinalizedAtResponse {
  // proposal ...
  repeated kyve.registry.v1beta1.Proposal proposals = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProposalSinceIdRequest ...
message QueryProposalSinceIdRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // height ...
  uint64 id = 3;
}

// QueryProposalSinceIdResponse ...
message QueryProposalSinceIdResponse {
  // proposal ...
  repeated kyve.registry.v1beta1.Proposal proposals = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// PROTOCOL NODE - FLOW

// QueryCanProposeRequest is the request type for the Query/CanPropose RPC method.
message QueryCanProposeRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // proposer ...
  string proposer = 2;
  // from_height ...
  uint64 from_height = 3;
}

// QueryCanProposeResponse is the response type for the Query/CanPropose RPC method.
message QueryCanProposeResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}

// QueryCanVoteRequest is the request type for the Query/CanVote RPC method.
message QueryCanVoteRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // voter ...
  string voter = 2;
  // storage_id ...
  string storage_id = 3;
}

// QueryCanVoteResponse is the response type for the Query/CanVote RPC method.
message QueryCanVoteResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}

// QueryStakeInfoRequest is the request type for the Query/StakeInfo RPC method.
message QueryStakeInfoRequest {
  // pool_id ...
  uint64 pool_id = 1;
  // staker ..
  string staker = 2;
}

// QueryStakeInfoResponse is the response type for the Query/StakeInfo RPC method.
message QueryStakeInfoResponse {
  // balance ...
  string balance = 1;
  // current_stake ...
  string current_stake = 2;
  // minimum_stake ...
  string minimum_stake = 3;
  // status ...
  StakerStatus status = 4;
}

// ###################
// ===== ACCOUNT =====
// ###################

// QueryAccountAssetsRequest is the request type for the Query/AccountAssets RPC method.
message QueryAccountAssetsRequest {
  // address ...
  string address = 1;
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
message QueryAccountAssetsResponse {
  // balance ...
  uint64 balance = 1;
  // protocol_staking ...
  uint64 protocol_staking = 2;
  // protocol_staking_unbonding
  uint64 protocol_staking_unbonding = 3;
  // protocol_delegation ...
  uint64 protocol_delegation = 4;
  // protocol_delegation_unbonding
  uint64 protocol_delegation_unbonding = 5;
  // protocol_rewards ...
  uint64 protocol_rewards = 6;
  // protocol_funding ...
  uint64 protocol_funding = 7;
}

// QueryAccountFundedListRequest ...
message QueryAccountStakingUnbondingsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
message QueryAccountStakingUnbondingsResponse {
  // balance ...
  repeated kyve.registry.v1beta1.StakingUnbonding unbondings = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
message StakingUnbonding {
  // amount
  uint64 amount = 1;
  // creation_time
  uint64 creation_time = 2;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 3;
}

// QueryAccountFundedListRequest ...
message QueryAccountDelegationUnbondingsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
message QueryAccountDelegationUnbondingsResponse {
  // balance ...
  repeated kyve.registry.v1beta1.DelegationUnbonding unbondings = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
message DelegationUnbonding {
  // amount
  uint64 amount = 1;
  // creation_time
  uint64 creation_time = 2;
  // creation_time
  kyve.registry.v1beta1.StakerResponse staker = 3;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 4;
}

// QueryAccountFundedListRequest is the request type for the account queries with pagination
message QueryAccountFundedListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountFundedListResponse is the response type for the Query/AccountFundedList RPC method.
message QueryAccountFundedListResponse {
  // funded ...
  repeated kyve.registry.v1beta1.Funded funded = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Funded ...
message Funded {
  // account ...
  string account = 1;
  // amount ...
  uint64 amount = 2;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 3;
}

// QueryAccountStakedListRequest ...
message QueryAccountStakedListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountStakedListResponse is the response type for the Query/StakedList RPC method.
message QueryAccountStakedListResponse {
  // staked ...
  repeated Staked staked = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Staked ...
message Staked {
  // staker ...
  string staker = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // account ...
  string account = 3;
  // amount ...
  uint64 amount = 4;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 6;
  // unbonding_amount ...
  uint64 unbonding_amount = 7;
  // upload_probability
  string upload_probability = 8;
}

// QueryAccountDelegationListRequest ...
message QueryAccountDelegationListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method.
message QueryAccountDelegationListResponse {
  // delegations ...
  repeated kyve.registry.v1beta1.DelegatorResponse delegations = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// DelegatorResponse ...
message DelegatorResponse {
  // account ...
  string account = 1;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 2;
  // current_reward ...
  uint64 current_reward = 3;
  // delegation_amount ...
  uint64 delegation_amount = 4;
  // staker ...
  string staker = 5;
  // pending_commission_change
  PendingCommissionChange pending_commission_change = 6;
  // delegation_pool_data ...
  kyve.registry.v1beta1.DelegationPoolData delegation_pool_data = 7;
}

// QueryAccountDelegationListRequest ...
message QueryAccountRedelegationRequest {
  // address ...
  string address = 1;
}

// QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method.
message QueryAccountRedelegationResponse {
  // redelegation_cooldown_entries ...
  repeated uint64 redelegation_cooldown_entries = 1 [(gogoproto.nullable) = false];
}

// ######################
// ===== DELEGATION =====
// ######################

// QueryDelegatorRequest is the request type for the Query/Delegator RPC method.
message QueryDelegatorRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // staker ...
  string staker = 2;
  // delegator ...
  string delegator = 3;
}

// QueryDelegatorResponse is the response type for the Query/Delegator RPC method.
message QueryDelegatorResponse {
  // delegator ...
  kyve.registry.v1beta1.StakerDelegatorResponse delegator = 1;
}

// StakerDelegatorResponse ...
message StakerDelegatorResponse {
  // delegator ...
  string delegator = 1;
  // current_reward ...
  uint64 current_reward = 2;
  // delegation_amount ...
  uint64 delegation_amount = 3;
  // staker ...
  string staker = 4;
}

// QueryDelegatorsByPoolAndStakerRequest is the request type for the Query/DelegatorsByPoolAndStaker RPC method.
message QueryDelegatorsByPoolAndStakerRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // staker ...
  string staker = 3;
}

// QueryDelegatorsByPoolAndStakerResponse is the response type for the Query/DelegatorsByPoolAndStaker RPC method.
message QueryDelegatorsByPoolAndStakerResponse {
  // delegators ...
  repeated kyve.registry.v1beta1.StakerDelegatorResponse delegators = 1 [(gogoproto.nullable) = false];
  // pool ...
  kyve.registry.v1beta1.Pool pool = 2;
  // delegation_pool_data ...
  kyve.registry.v1beta1.DelegationPoolData delegation_pool_data = 3;
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 4;
}

// QueryStakersByPoolAndDelegatorRequest  is the request type for the Query/StakersByPoolAndDelegator RPC method.
message QueryStakersByPoolAndDelegatorRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // delegator ...
  string delegator = 3;
}

// QueryStakersByPoolAndDelegatorResponse  is the response type for the Query/StakersByPoolAndDelegator RPC method.
message QueryStakersByPoolAndDelegatorResponse {
  // delegator ...
  string delegator = 1;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 2;
  // stakers ...
  repeated kyve.registry.v1beta1.DelegationForStakerResponse stakers = 3 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 4;
}

// DelegationForStakerResponse ...
message DelegationForStakerResponse {
  // staker ...
  string staker = 1;
  // current_reward ...
  uint64 current_reward = 2;
  // delegation_amount ...
  uint64 delegation_amount = 3;
  // total_delegation_amount ...
  uint64 total_delegation_amount = 4;
  // delegator_count ...
  uint64 delegator_count = 5;
}
