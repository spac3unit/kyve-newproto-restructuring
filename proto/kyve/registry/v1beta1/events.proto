syntax = "proto3";

package kyve.registry.v1beta1;

import "gogoproto/gogo.proto";
import "kyve/registry/v1beta1/registry.proto";

option go_package = "github.com/KYVENetwork/chain/x/registry/types";

// BundleStatus ...
enum BundleStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // BUNDLE_STATUS_UNSPECIFIED ...
  BUNDLE_STATUS_UNSPECIFIED = 0;
  // BUNDLE_STATUS_VALID ...
  BUNDLE_STATUS_VALID = 1;
  // BUNDLE_STATUS_INVALID ...
  BUNDLE_STATUS_INVALID = 2;
  // BUNDLE_STATUS_NO_FUNDS ...
  BUNDLE_STATUS_NO_FUNDS = 3;
  // BUNDLE_STATUS_NO_QUORUM ...
  BUNDLE_STATUS_NO_QUORUM = 4;
}

// SlashType ...
enum SlashType {
  option (gogoproto.goproto_enum_prefix) = false;

  // SLASH_TYPE_UNSPECIFIED ...
  SLASH_TYPE_UNSPECIFIED = 0;
  // SLASH_TYPE_TIMEOUT ...
  SLASH_TYPE_TIMEOUT = 1;
  // SLASH_TYPE_VOTE ...
  SLASH_TYPE_VOTE = 2;
  // SLASH_TYPE_UPLOAD ...
  SLASH_TYPE_UPLOAD = 3;
}

// ---------- Bundle Events ----------

// EventBundleFinalised is an event emitted when a bundle is finalised.
message EventBundleFinalised {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // storage_id ...
  string storage_id = 2;
  // byte_size ...
  uint64 byte_size = 3;
  // uploader ...
  string uploader = 4;
  // next_uploader ...
  string next_uploader = 5;
  // reward ...
  uint64 reward = 6;
  // valid ...
  uint64 valid = 7;
  // invalid ...
  uint64 invalid = 8;
  // from_height ...
  uint64 from_height = 9;
  // to_height ...
  uint64 to_height = 10;
  // status ...
  BundleStatus status = 11;
  // to_key ...
  string to_key = 12;
  // to_value ...
  string to_value = 13;
  // id ...
  uint64 id = 14;
  // bundle_hash ...
  string bundle_hash = 15;
  // abstain ...
  uint64 abstain = 16;
  // total ...
  uint64 total = 17;
}


// ---------- Delegating Events ----------

// EventDelegatePool is an event emitted when someone delegates to a protocol node.
message EventDelegatePool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the delegator.
  string address = 2;
  // node is the account address of the protocol node.
  string node = 3;
  // amount ...
  uint64 amount = 4;
}

// EventUndelegatePool is an event emitted when someone undelegates from a protocol node.
message EventUndelegatePool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the delegator.
  string address = 2;
  // node is the account address of the protocol node.
  string node = 3;
  // amount ...
  uint64 amount = 4;
}

// EventRedelegatePool is an event emitted when someone redelegates from one protocol node to another.
message EventRedelegatePool {
  // address is the account address of the delegator.
  string address = 1;
  // from_pool is the unique ID of the pool the user withdraws its delegation from
  uint64 from_pool = 2;
  // from_node is the account address of the protocol node the users withdraws from.
  string from_node = 3;
  // pool_id is the unique ID of the pool of the new pool the user delegates to
  uint64 to_pool = 4;
  // address is the account address of the new staker in the the pool
  string to_node = 5;
  // amount ...
  uint64 amount = 6;
}

// ---------- Funding Events ----------

// EventFundPool is an event emitted when a pool is funded.
message EventFundPool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amount ...
  uint64 amount = 3;
}

// EventDefundPool is an event emitted when a pool is defunded.
message EventDefundPool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amount ...
  uint64 amount = 3;
}

// ---------- Protocol Node Events ----------

// EventSlash is an event emitted when a protocol node is slashed.
message EventSlash {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the protocol node.
  string address = 2;
  // amount ...
  uint64 amount = 3;
  // slash_type
  SlashType slash_type = 4;
}

// EventUpdateMetadata is an event emitted when a protocol node updates their metadata.
message EventUpdateMetadata {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the protocol node.
  string address = 2;
  // moniker ...
  string moniker = 3;
  // website ...
  string website = 4;
  // logo ...
  string logo = 5;
}

// EventUpdateCommission ...
message EventUpdateCommission {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the protocol node.
  string address = 2;
  // commission ...
  string commission = 3;
}

// ---------- Staking Events ----------

// EventStakePool is an event emitted when a protocol node stakes in a pool.
message EventStakePool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the protocol node.
  string address = 2;
  // amount ...
  uint64 amount = 3;
}

// EventUnstakePool is an event emitted when a protocol node unstakes from a pool.
message EventUnstakePool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the protocol node.
  string address = 2;
  // amount ...
  uint64 amount = 3;
}

// EventStakerStatusChanged ...
message EventStakerStatusChanged {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the protocol node.
  string address = 2;
  // amount ...
  StakerStatus status = 3;
}
