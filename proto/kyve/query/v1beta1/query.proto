syntax = "proto3";
package KYVENetwork.chain.query;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "kyve/query/v1beta1/params.proto";
import "kyve/query/v1beta1/responses.proto";
import "kyve/pool/v1beta1/pool.proto";
import "kyve/stakers/v1beta1/stakers.proto";
import "kyve/bundles/v1beta1/bundles.proto";

option go_package = "github.com/KYVENetwork/chain/x/query/types";

// Query defines the gRPC querier service.
service Query {

  // Pools queries for all pools.
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/pools";
  }

  // PoolById queries a pool by ID.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/pool/{id}";
  }

  // Stakers queries for all stakers.
  rpc Stakers(QueryStakersRequest) returns (QueryStakersResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/stakers";
  }

  // Staker queries for all stakers.
  rpc Staker(QueryStakerRequest) returns (QueryStakerResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/staker/{address}";
  }

  // Staker queries for all stakers.
  rpc StakersByPool(QueryStakersByPoolRequest) returns (QueryStakersByPoolResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/stakers_by_pool/{pool_id}";
  }

  // FinalizedBundles ...
  rpc FinalizedBundles(QueryFinalizedBundlesRequest) returns (QueryFinalizedBundlesResponse) {
    option deprecated = true;
    option (google.api.http).get = "/kyve/query/v1beta1/finalized_bundles/{pool_id}";
  }

  // FinalizedBundle ...
  rpc FinalizedBundle(QueryFinalizedBundleRequest) returns (QueryFinalizedBundleResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/finalized_bundle/{pool_id}/{id}";
  }
}

// QueryPoolsRequest is the request type for the Query/Pools RPC method.
message QueryPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // search ...
  string search = 2;
  // runtime ...
  string runtime = 3;
  // paused ...
  bool paused = 4;
}

// QueryPoolsResponse is the response type for the Query/Pools RPC method.
message QueryPoolsResponse {
  // pools ...
  repeated PoolResponse pools = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPoolRequest is the request type for the Query/Pool RPC method.
message QueryPoolRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
}

// QueryPoolResponse is the response type for the Query/Pool RPC method.
message QueryPoolResponse {
  // pool ...
  PoolResponse pool = 1 [(gogoproto.nullable) = false];
}

// QueryStakersRequest is the request type for the Query/Stakers RPC method.
message QueryStakersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryStakersResponse is the response type for the Query/Stakers RPC method.
message QueryStakersResponse {
  // stakers ...
  repeated StakerResponse stakers = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryStakerRequest is the request type for the Query/Staker RPC method.
message QueryStakerRequest {
  // address ...
  string address = 1;
}

// QueryStakerResponse is the response type for the Query/Staker RPC method.
message QueryStakerResponse {
  // staker ...
  StakerResponse staker = 1 [(gogoproto.nullable) = false];
}

// QueryStakersByPoolRequest is the request type for the Query/Staker RPC method.
message QueryStakersByPoolRequest {
  // pool_id ...
  uint64 pool_id = 1;
}

// QueryStakersByPoolResponse is the response type for the Query/Staker RPC method.
message QueryStakersByPoolResponse {
  // stakers ...
  repeated StakerPoolResponse stakers = 1 [(gogoproto.nullable) = false];
}

// QueryFinalizedBundlesRequest is the request type for the Query/Staker RPC method.
message QueryFinalizedBundlesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
}

// QueryStakersByPoolResponse is the response type for the Query/Staker RPC method.
message QueryFinalizedBundlesResponse {
  // finalized_bundles ...
  repeated kyve.bundles.v1beta1.FinalizedBundle finalized_bundles = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFinalizedBundleRequest is the request type for the Query/Staker RPC method.
message QueryFinalizedBundleRequest {
  // pool_id ...
  uint64 pool_id = 1;
  // id ...
  uint64 id = 2;
}

// QueryFinalizedBundleResponse is the response type for the Query/Staker RPC method.
message QueryFinalizedBundleResponse {
  // finalized_bundle ...
  kyve.bundles.v1beta1.FinalizedBundle finalized_bundle = 1 [(gogoproto.nullable) = false];
}
