// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/registry/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryStakersListRequest is the request type for the Query/StakersList RPC method.
type QueryStakersListRequest struct {
	// pool_id defines the unique ID of the pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// status ...
	Status StakerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kyve.registry.v1beta1.StakerStatus" json:"status,omitempty"`
	// pagination ...
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakersListRequest) Reset()         { *m = QueryStakersListRequest{} }
func (m *QueryStakersListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakersListRequest) ProtoMessage()    {}
func (*QueryStakersListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{0}
}
func (m *QueryStakersListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersListRequest.Merge(m, src)
}
func (m *QueryStakersListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersListRequest proto.InternalMessageInfo

func (m *QueryStakersListRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryStakersListRequest) GetStatus() StakerStatus {
	if m != nil {
		return m.Status
	}
	return STAKER_STATUS_UNSPECIFIED
}

func (m *QueryStakersListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakersListResponse is the response type for the Query/StakersList RPC method.
type QueryStakersListResponse struct {
	// stakers ...
	Stakers []*StakerResponse `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers,omitempty"`
	// pagination ...
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakersListResponse) Reset()         { *m = QueryStakersListResponse{} }
func (m *QueryStakersListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakersListResponse) ProtoMessage()    {}
func (*QueryStakersListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{1}
}
func (m *QueryStakersListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersListResponse.Merge(m, src)
}
func (m *QueryStakersListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersListResponse proto.InternalMessageInfo

func (m *QueryStakersListResponse) GetStakers() []*StakerResponse {
	if m != nil {
		return m.Stakers
	}
	return nil
}

func (m *QueryStakersListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakerRequest is the request type for the Query/Staker RPC method.
type QueryStakerRequest struct {
	// pool_id defines the unique ID of the pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *QueryStakerRequest) Reset()         { *m = QueryStakerRequest{} }
func (m *QueryStakerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakerRequest) ProtoMessage()    {}
func (*QueryStakerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{2}
}
func (m *QueryStakerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerRequest.Merge(m, src)
}
func (m *QueryStakerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerRequest proto.InternalMessageInfo

func (m *QueryStakerRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryStakerRequest) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

// QueryStakerResponse is the response type for the Query/Staker RPC method.
type QueryStakerResponse struct {
	// staker ...
	Staker *StakerResponse `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *QueryStakerResponse) Reset()         { *m = QueryStakerResponse{} }
func (m *QueryStakerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerResponse) ProtoMessage()    {}
func (*QueryStakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{3}
}
func (m *QueryStakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerResponse.Merge(m, src)
}
func (m *QueryStakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerResponse proto.InternalMessageInfo

func (m *QueryStakerResponse) GetStaker() *StakerResponse {
	if m != nil {
		return m.Staker
	}
	return nil
}

// PendingCommissionChange ...
type PendingCommissionChange struct {
	// new_commission ...
	NewCommission string `protobuf:"bytes,1,opt,name=new_commission,json=newCommission,proto3" json:"new_commission,omitempty"`
	// creation_date ...
	CreationDate int64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// finish_date ...
	FinishDate int64 `protobuf:"varint,3,opt,name=finish_date,json=finishDate,proto3" json:"finish_date,omitempty"`
}

func (m *PendingCommissionChange) Reset()         { *m = PendingCommissionChange{} }
func (m *PendingCommissionChange) String() string { return proto.CompactTextString(m) }
func (*PendingCommissionChange) ProtoMessage()    {}
func (*PendingCommissionChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{4}
}
func (m *PendingCommissionChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingCommissionChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingCommissionChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingCommissionChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingCommissionChange.Merge(m, src)
}
func (m *PendingCommissionChange) XXX_Size() int {
	return m.Size()
}
func (m *PendingCommissionChange) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingCommissionChange.DiscardUnknown(m)
}

var xxx_messageInfo_PendingCommissionChange proto.InternalMessageInfo

func (m *PendingCommissionChange) GetNewCommission() string {
	if m != nil {
		return m.NewCommission
	}
	return ""
}

func (m *PendingCommissionChange) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func (m *PendingCommissionChange) GetFinishDate() int64 {
	if m != nil {
		return m.FinishDate
	}
	return 0
}

// StakerResponse ...
type StakerResponse struct {
	// staker ...
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// account ...
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,5,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// commission ...
	Commission string `protobuf:"bytes,6,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,7,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website ...
	Website string `protobuf:"bytes,8,opt,name=website,proto3" json:"website,omitempty"`
	// logo
	Logo string `protobuf:"bytes,9,opt,name=logo,proto3" json:"logo,omitempty"`
	// points
	Points uint64 `protobuf:"varint,10,opt,name=points,proto3" json:"points,omitempty"`
	// unbonding_amount ...
	UnbondingAmount uint64 `protobuf:"varint,11,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	// upload_probability
	UploadProbability string `protobuf:"bytes,12,opt,name=upload_probability,json=uploadProbability,proto3" json:"upload_probability,omitempty"`
	// status
	Status StakerStatus `protobuf:"varint,13,opt,name=status,proto3,enum=kyve.registry.v1beta1.StakerStatus" json:"status,omitempty"`
	// pending_commission_change
	PendingCommissionChange *PendingCommissionChange `protobuf:"bytes,14,opt,name=pending_commission_change,json=pendingCommissionChange,proto3" json:"pending_commission_change,omitempty"`
}

func (m *StakerResponse) Reset()         { *m = StakerResponse{} }
func (m *StakerResponse) String() string { return proto.CompactTextString(m) }
func (*StakerResponse) ProtoMessage()    {}
func (*StakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{5}
}
func (m *StakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerResponse.Merge(m, src)
}
func (m *StakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *StakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StakerResponse proto.InternalMessageInfo

func (m *StakerResponse) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *StakerResponse) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *StakerResponse) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *StakerResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *StakerResponse) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *StakerResponse) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *StakerResponse) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *StakerResponse) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *StakerResponse) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *StakerResponse) GetPoints() uint64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *StakerResponse) GetUnbondingAmount() uint64 {
	if m != nil {
		return m.UnbondingAmount
	}
	return 0
}

func (m *StakerResponse) GetUploadProbability() string {
	if m != nil {
		return m.UploadProbability
	}
	return ""
}

func (m *StakerResponse) GetStatus() StakerStatus {
	if m != nil {
		return m.Status
	}
	return STAKER_STATUS_UNSPECIFIED
}

func (m *StakerResponse) GetPendingCommissionChange() *PendingCommissionChange {
	if m != nil {
		return m.PendingCommissionChange
	}
	return nil
}

// QueryProposalByHeightRequest is the request type for the Query/ProposalByHeight RPC method.
type QueryProposalByHeightRequest struct {
	// pool_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// height ...
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryProposalByHeightRequest) Reset()         { *m = QueryProposalByHeightRequest{} }
func (m *QueryProposalByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposalByHeightRequest) ProtoMessage()    {}
func (*QueryProposalByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{6}
}
func (m *QueryProposalByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalByHeightRequest.Merge(m, src)
}
func (m *QueryProposalByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalByHeightRequest proto.InternalMessageInfo

func (m *QueryProposalByHeightRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryProposalByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryProposalResponse is the response type for the Query/ProposalByHeight RPC method.
type QueryProposalByHeightResponse struct {
	// proposal ...
	Proposal Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal"`
}

func (m *QueryProposalByHeightResponse) Reset()         { *m = QueryProposalByHeightResponse{} }
func (m *QueryProposalByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposalByHeightResponse) ProtoMessage()    {}
func (*QueryProposalByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{7}
}
func (m *QueryProposalByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalByHeightResponse.Merge(m, src)
}
func (m *QueryProposalByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalByHeightResponse proto.InternalMessageInfo

func (m *QueryProposalByHeightResponse) GetProposal() Proposal {
	if m != nil {
		return m.Proposal
	}
	return Proposal{}
}

// QueryProposalByFinalizedAtRequest ...
type QueryProposalSinceFinalizedAtRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// height ...
	FinalizedAt uint64 `protobuf:"varint,3,opt,name=finalized_at,json=finalizedAt,proto3" json:"finalized_at,omitempty"`
}

func (m *QueryProposalSinceFinalizedAtRequest) Reset()         { *m = QueryProposalSinceFinalizedAtRequest{} }
func (m *QueryProposalSinceFinalizedAtRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposalSinceFinalizedAtRequest) ProtoMessage()    {}
func (*QueryProposalSinceFinalizedAtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{8}
}
func (m *QueryProposalSinceFinalizedAtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalSinceFinalizedAtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalSinceFinalizedAtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalSinceFinalizedAtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalSinceFinalizedAtRequest.Merge(m, src)
}
func (m *QueryProposalSinceFinalizedAtRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalSinceFinalizedAtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalSinceFinalizedAtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalSinceFinalizedAtRequest proto.InternalMessageInfo

func (m *QueryProposalSinceFinalizedAtRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryProposalSinceFinalizedAtRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryProposalSinceFinalizedAtRequest) GetFinalizedAt() uint64 {
	if m != nil {
		return m.FinalizedAt
	}
	return 0
}

// QueryProposalByFinalizedAtResponse ...
type QueryProposalSinceFinalizedAtResponse struct {
	// proposal ...
	Proposals []Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProposalSinceFinalizedAtResponse) Reset()         { *m = QueryProposalSinceFinalizedAtResponse{} }
func (m *QueryProposalSinceFinalizedAtResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposalSinceFinalizedAtResponse) ProtoMessage()    {}
func (*QueryProposalSinceFinalizedAtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{9}
}
func (m *QueryProposalSinceFinalizedAtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalSinceFinalizedAtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalSinceFinalizedAtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalSinceFinalizedAtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalSinceFinalizedAtResponse.Merge(m, src)
}
func (m *QueryProposalSinceFinalizedAtResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalSinceFinalizedAtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalSinceFinalizedAtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalSinceFinalizedAtResponse proto.InternalMessageInfo

func (m *QueryProposalSinceFinalizedAtResponse) GetProposals() []Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *QueryProposalSinceFinalizedAtResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProposalSinceIdRequest ...
type QueryProposalSinceIdRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// pool_id ...
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// height ...
	Id uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryProposalSinceIdRequest) Reset()         { *m = QueryProposalSinceIdRequest{} }
func (m *QueryProposalSinceIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposalSinceIdRequest) ProtoMessage()    {}
func (*QueryProposalSinceIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{10}
}
func (m *QueryProposalSinceIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalSinceIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalSinceIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalSinceIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalSinceIdRequest.Merge(m, src)
}
func (m *QueryProposalSinceIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalSinceIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalSinceIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalSinceIdRequest proto.InternalMessageInfo

func (m *QueryProposalSinceIdRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryProposalSinceIdRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryProposalSinceIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryProposalSinceIdResponse ...
type QueryProposalSinceIdResponse struct {
	// proposal ...
	Proposals []Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProposalSinceIdResponse) Reset()         { *m = QueryProposalSinceIdResponse{} }
func (m *QueryProposalSinceIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposalSinceIdResponse) ProtoMessage()    {}
func (*QueryProposalSinceIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c3b23aaee0836da, []int{11}
}
func (m *QueryProposalSinceIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalSinceIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalSinceIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalSinceIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalSinceIdResponse.Merge(m, src)
}
func (m *QueryProposalSinceIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalSinceIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalSinceIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalSinceIdResponse proto.InternalMessageInfo

func (m *QueryProposalSinceIdResponse) GetProposals() []Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *QueryProposalSinceIdResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryStakersListRequest)(nil), "kyve.registry.v1beta1.QueryStakersListRequest")
	proto.RegisterType((*QueryStakersListResponse)(nil), "kyve.registry.v1beta1.QueryStakersListResponse")
	proto.RegisterType((*QueryStakerRequest)(nil), "kyve.registry.v1beta1.QueryStakerRequest")
	proto.RegisterType((*QueryStakerResponse)(nil), "kyve.registry.v1beta1.QueryStakerResponse")
	proto.RegisterType((*PendingCommissionChange)(nil), "kyve.registry.v1beta1.PendingCommissionChange")
	proto.RegisterType((*StakerResponse)(nil), "kyve.registry.v1beta1.StakerResponse")
	proto.RegisterType((*QueryProposalByHeightRequest)(nil), "kyve.registry.v1beta1.QueryProposalByHeightRequest")
	proto.RegisterType((*QueryProposalByHeightResponse)(nil), "kyve.registry.v1beta1.QueryProposalByHeightResponse")
	proto.RegisterType((*QueryProposalSinceFinalizedAtRequest)(nil), "kyve.registry.v1beta1.QueryProposalSinceFinalizedAtRequest")
	proto.RegisterType((*QueryProposalSinceFinalizedAtResponse)(nil), "kyve.registry.v1beta1.QueryProposalSinceFinalizedAtResponse")
	proto.RegisterType((*QueryProposalSinceIdRequest)(nil), "kyve.registry.v1beta1.QueryProposalSinceIdRequest")
	proto.RegisterType((*QueryProposalSinceIdResponse)(nil), "kyve.registry.v1beta1.QueryProposalSinceIdResponse")
}

func init() { proto.RegisterFile("kyve/registry/v1beta1/query.proto", fileDescriptor_5c3b23aaee0836da) }

var fileDescriptor_5c3b23aaee0836da = []byte{
	// 1053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0xcf, 0x6c, 0xb6, 0x49, 0x33, 0x9b, 0xa4, 0x65, 0x80, 0xc6, 0x2c, 0x65, 0x93, 0xba, 0x0d,
	0xa4, 0x95, 0x62, 0xd3, 0x0d, 0x08, 0x50, 0x0b, 0x55, 0x9a, 0xb4, 0xa5, 0x2a, 0x1f, 0xc1, 0x41,
	0x48, 0x70, 0xb1, 0xc6, 0xeb, 0x89, 0x77, 0x88, 0xd7, 0xe3, 0x7a, 0x66, 0x1b, 0x96, 0x2a, 0x17,
	0x0e, 0x1c, 0x11, 0x12, 0x27, 0x8e, 0x48, 0x70, 0x41, 0x5c, 0x11, 0x07, 0xb8, 0x71, 0xe9, 0xb1,
	0x12, 0x17, 0x4e, 0x08, 0x25, 0x9c, 0xf8, 0x2b, 0x90, 0x67, 0xc6, 0x5e, 0x6f, 0x1a, 0x67, 0x37,
	0x15, 0x42, 0xdc, 0xfc, 0xbe, 0x7f, 0xbf, 0xb7, 0xef, 0x3d, 0x7b, 0xe1, 0xb9, 0xed, 0xde, 0x3d,
	0x62, 0x27, 0x24, 0xa0, 0x5c, 0x24, 0x3d, 0xfb, 0xde, 0x65, 0x8f, 0x08, 0x7c, 0xd9, 0xbe, 0xdb,
	0x25, 0x49, 0xcf, 0x8a, 0x13, 0x26, 0x18, 0x7a, 0x3a, 0x75, 0xb1, 0x32, 0x17, 0x4b, 0xbb, 0xd4,
	0x2f, 0xb5, 0x18, 0xef, 0x30, 0x6e, 0x7b, 0x98, 0x13, 0xe5, 0x9f, 0x47, 0xc7, 0x38, 0xa0, 0x11,
	0x16, 0x94, 0x45, 0x2a, 0x45, 0xfd, 0xa9, 0x80, 0x05, 0x4c, 0x3e, 0xda, 0xe9, 0x93, 0xd6, 0x9e,
	0x0d, 0x18, 0x0b, 0x42, 0x62, 0xe3, 0x98, 0xda, 0x38, 0x8a, 0x98, 0x90, 0x21, 0x5c, 0x5b, 0x2f,
	0x1c, 0x8e, 0x2c, 0xc7, 0x21, 0xbd, 0xcc, 0x9f, 0x00, 0x9c, 0x7b, 0x2f, 0x2d, 0xbe, 0x29, 0xf0,
	0x36, 0x49, 0xf8, 0x5b, 0x94, 0x0b, 0x87, 0xdc, 0xed, 0x12, 0x2e, 0xd0, 0x1c, 0x9c, 0x8c, 0x19,
	0x0b, 0x5d, 0xea, 0x1b, 0x60, 0x01, 0x2c, 0x55, 0x9d, 0x89, 0x54, 0xbc, 0xed, 0xa3, 0x2b, 0x70,
	0x82, 0x0b, 0x2c, 0xba, 0xdc, 0xa8, 0x2c, 0x80, 0xa5, 0xd9, 0xe6, 0x79, 0xeb, 0x50, 0x8a, 0x96,
	0xca, 0xb9, 0x29, 0x5d, 0x1d, 0x1d, 0x82, 0x6e, 0x42, 0xd8, 0xe7, 0x67, 0x8c, 0x2f, 0x80, 0xa5,
	0x5a, 0xf3, 0x79, 0x4b, 0x35, 0xc3, 0x4a, 0x9b, 0x61, 0xa9, 0xe6, 0x65, 0x49, 0x36, 0x70, 0x40,
	0x34, 0x22, 0xa7, 0x10, 0x69, 0x7e, 0x0b, 0xa0, 0xf1, 0x28, 0x72, 0x1e, 0xb3, 0x88, 0x13, 0x74,
	0x0d, 0x4e, 0x72, 0xa5, 0x36, 0xc0, 0xc2, 0xf8, 0x52, 0xad, 0xb9, 0x78, 0x24, 0xc4, 0x2c, 0xce,
	0xc9, 0xa2, 0xd0, 0xad, 0x01, 0x94, 0x15, 0x89, 0xf2, 0x85, 0xa1, 0x28, 0x75, 0x96, 0x22, 0xcc,
	0x1b, 0x10, 0x15, 0x50, 0x0e, 0x6d, 0xed, 0x19, 0xd9, 0xda, 0x6d, 0x92, 0xc8, 0x9a, 0x53, 0x8e,
	0x96, 0xcc, 0xf7, 0xe1, 0x93, 0x03, 0x69, 0x34, 0xcf, 0xd7, 0x73, 0x77, 0x20, 0x21, 0x8e, 0x48,
	0x33, 0xcb, 0xfa, 0x39, 0x80, 0x73, 0x1b, 0x24, 0xf2, 0x69, 0x14, 0xac, 0xb1, 0x4e, 0x87, 0x72,
	0x4e, 0x59, 0xb4, 0xd6, 0xc6, 0x51, 0x40, 0xd0, 0x22, 0x9c, 0x8d, 0xc8, 0x8e, 0xdb, 0xca, 0xf5,
	0xb2, 0xc4, 0x94, 0x33, 0x13, 0x91, 0x9d, 0xbe, 0x33, 0x3a, 0x0f, 0x67, 0x5a, 0x09, 0x91, 0x5c,
	0x5d, 0x1f, 0x0b, 0x22, 0x71, 0x8f, 0x3b, 0xd3, 0x99, 0x72, 0x1d, 0x0b, 0x82, 0xe6, 0x61, 0x6d,
	0x8b, 0x46, 0x94, 0xb7, 0x95, 0xcb, 0xb8, 0x74, 0x81, 0x4a, 0x95, 0x3a, 0x98, 0xdf, 0x54, 0xe1,
	0xec, 0x01, 0x6a, 0x67, 0x06, 0xa8, 0xe5, 0x9d, 0x28, 0xb6, 0xae, 0x32, 0xd0, 0x3a, 0x03, 0x4e,
	0xe2, 0x56, 0x8b, 0x75, 0x23, 0x21, 0x0b, 0x4c, 0x39, 0x99, 0x98, 0xa6, 0xc2, 0x1d, 0x69, 0xa8,
	0xaa, 0x08, 0x25, 0xa1, 0x8b, 0xf0, 0xb4, 0x60, 0x02, 0x87, 0xae, 0x4f, 0x42, 0x12, 0xa8, 0x9f,
	0xfa, 0x84, 0xf4, 0x38, 0x25, 0xf5, 0xeb, 0xb9, 0x1a, 0x35, 0x20, 0x2c, 0x74, 0x62, 0x42, 0xe6,
	0x2f, 0x68, 0xd2, 0xe2, 0x1d, 0x16, 0xd1, 0x14, 0xee, 0xa4, 0x2a, 0xae, 0xc5, 0xd4, 0xb2, 0x43,
	0x3c, 0x4e, 0x05, 0x31, 0x4e, 0x2a, 0x8b, 0x16, 0x11, 0x82, 0xd5, 0x90, 0x05, 0xcc, 0x98, 0x92,
	0x6a, 0xf9, 0x9c, 0x42, 0x8d, 0x19, 0x8d, 0x04, 0x37, 0x60, 0x46, 0x2e, 0x95, 0x52, 0xa8, 0xdd,
	0xc8, 0x63, 0xf2, 0xa7, 0x72, 0x35, 0x99, 0x9a, 0x82, 0x9a, 0xeb, 0x57, 0x15, 0xab, 0x65, 0x88,
	0xba, 0x71, 0xc8, 0xb0, 0xef, 0xc6, 0x09, 0xf3, 0xb0, 0x47, 0x43, 0x2a, 0x7a, 0xc6, 0xb4, 0x2c,
	0xf2, 0x84, 0xb2, 0x6c, 0xf4, 0x0d, 0x85, 0x65, 0x9e, 0x39, 0xfe, 0x32, 0x7f, 0x0c, 0x9f, 0x89,
	0xd5, 0xfc, 0x14, 0x06, 0xc5, 0x6d, 0xc9, 0x09, 0x32, 0x66, 0xe5, 0x48, 0x5a, 0x25, 0xf9, 0x4a,
	0xe6, 0xce, 0x99, 0x8b, 0x0f, 0x37, 0x98, 0xef, 0xc2, 0xb3, 0x72, 0x05, 0x36, 0x12, 0x16, 0x33,
	0x8e, 0xc3, 0xeb, 0xbd, 0x37, 0x09, 0x0d, 0xda, 0x62, 0x94, 0x9d, 0x6a, 0x4b, 0xcf, 0x6c, 0x60,
	0x94, 0x64, 0x7a, 0xf0, 0xb9, 0x92, 0x84, 0x7a, 0x04, 0x57, 0xe1, 0xc9, 0x58, 0xdb, 0xf4, 0x7e,
	0xcd, 0x97, 0x91, 0xc9, 0x52, 0x54, 0x1f, 0xfc, 0x31, 0x3f, 0xe6, 0xe4, 0x61, 0xe6, 0xf7, 0x00,
	0x5e, 0x18, 0x28, 0xb2, 0x49, 0xa3, 0x16, 0xb9, 0x49, 0x23, 0x1c, 0xd2, 0x4f, 0x89, 0xbf, 0x9a,
	0xa3, 0x1f, 0x3c, 0x8b, 0xe0, 0x71, 0xcf, 0x62, 0xf9, 0x7a, 0x9c, 0x83, 0xd3, 0x5b, 0x59, 0x59,
	0x17, 0xab, 0x1d, 0xa9, 0x3a, 0xb5, 0xad, 0x3e, 0x14, 0xf3, 0x47, 0x00, 0x17, 0x87, 0x80, 0xd5,
	0x9d, 0x59, 0x83, 0x53, 0x19, 0xc5, 0xec, 0xc2, 0x8e, 0xd8, 0x9a, 0x7e, 0xdc, 0xbf, 0x77, 0x63,
	0xbf, 0x00, 0xf0, 0xd9, 0x47, 0x71, 0xdf, 0xf6, 0xff, 0xb3, 0xde, 0xce, 0xc2, 0x0a, 0xf5, 0x75,
	0x47, 0x2b, 0xd4, 0x37, 0x7f, 0x00, 0x07, 0x66, 0x35, 0x07, 0xf4, 0x7f, 0xec, 0x5f, 0xf3, 0x97,
	0x49, 0x78, 0x42, 0xc2, 0x45, 0xdf, 0x01, 0x58, 0x2b, 0xbc, 0x4f, 0x51, 0xd9, 0xf2, 0x96, 0x7c,
	0x32, 0xd4, 0xed, 0x91, 0xfd, 0x15, 0x0c, 0xf3, 0xe5, 0xcf, 0x7e, 0xfb, 0xeb, 0xab, 0x8a, 0x8d,
	0x96, 0xed, 0xc3, 0x3f, 0x57, 0xf4, 0xfb, 0xd8, 0x0d, 0x29, 0x17, 0xf6, 0x7d, 0xdd, 0xfd, 0x5d,
	0xf4, 0x35, 0x80, 0x13, 0x2a, 0x1d, 0xba, 0x38, 0xbc, 0x64, 0x86, 0xee, 0xd2, 0x28, 0xae, 0x1a,
	0xd8, 0xab, 0x12, 0x58, 0x13, 0xbd, 0x78, 0x24, 0xb0, 0x3e, 0x24, 0xfb, 0xbe, 0xd2, 0xec, 0xa2,
	0x5f, 0x01, 0x3c, 0x7d, 0xf0, 0xa4, 0xa0, 0x95, 0xa3, 0x4a, 0x97, 0x5c, 0xb4, 0xfa, 0x4b, 0xc7,
	0x0b, 0xd2, 0xc8, 0xd7, 0x25, 0xf2, 0x37, 0xd0, 0xd5, 0x12, 0xe4, 0xd9, 0x00, 0xb9, 0x5e, 0xcf,
	0x55, 0x97, 0xb0, 0xc8, 0x42, 0x69, 0x76, 0xd1, 0xdf, 0x00, 0x1a, 0x65, 0x67, 0x00, 0x5d, 0x19,
	0x05, 0x58, 0xc9, 0xa5, 0xab, 0x5f, 0x7d, 0xbc, 0x60, 0xcd, 0x6e, 0x53, 0xb2, 0x7b, 0x1b, 0xdd,
	0x19, 0xc6, 0x8e, 0xa7, 0x19, 0xdc, 0xe2, 0xc9, 0x2b, 0xd2, 0x2c, 0xea, 0x77, 0xd1, 0xcf, 0x00,
	0x9e, 0x3a, 0xb0, 0xaa, 0xa8, 0x39, 0x32, 0xcc, 0xfc, 0xd0, 0xd4, 0x57, 0x8e, 0x15, 0xa3, 0x19,
	0x5d, 0x93, 0x8c, 0x5e, 0x43, 0xaf, 0x8c, 0xc6, 0x88, 0xfa, 0x45, 0x1e, 0xd4, 0xdf, 0xbd, 0x7e,
	0xeb, 0xc1, 0x5e, 0x03, 0x3c, 0xdc, 0x6b, 0x80, 0x3f, 0xf7, 0x1a, 0xe0, 0xcb, 0xfd, 0xc6, 0xd8,
	0xc3, 0xfd, 0xc6, 0xd8, 0xef, 0xfb, 0x8d, 0xb1, 0x8f, 0x96, 0x03, 0x2a, 0xda, 0x5d, 0xcf, 0x6a,
	0xb1, 0x8e, 0x7d, 0xe7, 0xc3, 0x0f, 0x6e, 0xbc, 0x43, 0xc4, 0x0e, 0x4b, 0xb6, 0xed, 0x56, 0x1b,
	0xd3, 0xc8, 0xfe, 0xa4, 0x5f, 0x4b, 0xf4, 0x62, 0xc2, 0xbd, 0x09, 0xf9, 0x9f, 0x60, 0xe5, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0x8e, 0x57, 0xf2, 0xd5, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// StakersList returns all staker addresses with their corresponding staking amount for a given pool
	StakersList(ctx context.Context, in *QueryStakersListRequest, opts ...grpc.CallOption) (*QueryStakersListResponse, error)
	// Staker returns all staker info
	Staker(ctx context.Context, in *QueryStakerRequest, opts ...grpc.CallOption) (*QueryStakerResponse, error)
	// ProposalByHeight ...
	ProposalByHeight(ctx context.Context, in *QueryProposalByHeightRequest, opts ...grpc.CallOption) (*QueryProposalByHeightResponse, error)
	// ProposalSinceFinalizedAt ...
	ProposalSinceFinalizedAt(ctx context.Context, in *QueryProposalSinceFinalizedAtRequest, opts ...grpc.CallOption) (*QueryProposalSinceFinalizedAtResponse, error)
	// ProposalSinceId ...
	ProposalSinceId(ctx context.Context, in *QueryProposalSinceIdRequest, opts ...grpc.CallOption) (*QueryProposalSinceIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) StakersList(ctx context.Context, in *QueryStakersListRequest, opts ...grpc.CallOption) (*QueryStakersListResponse, error) {
	out := new(QueryStakersListResponse)
	err := c.cc.Invoke(ctx, "/kyve.registry.v1beta1.Query/StakersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Staker(ctx context.Context, in *QueryStakerRequest, opts ...grpc.CallOption) (*QueryStakerResponse, error) {
	out := new(QueryStakerResponse)
	err := c.cc.Invoke(ctx, "/kyve.registry.v1beta1.Query/Staker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposalByHeight(ctx context.Context, in *QueryProposalByHeightRequest, opts ...grpc.CallOption) (*QueryProposalByHeightResponse, error) {
	out := new(QueryProposalByHeightResponse)
	err := c.cc.Invoke(ctx, "/kyve.registry.v1beta1.Query/ProposalByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposalSinceFinalizedAt(ctx context.Context, in *QueryProposalSinceFinalizedAtRequest, opts ...grpc.CallOption) (*QueryProposalSinceFinalizedAtResponse, error) {
	out := new(QueryProposalSinceFinalizedAtResponse)
	err := c.cc.Invoke(ctx, "/kyve.registry.v1beta1.Query/ProposalSinceFinalizedAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposalSinceId(ctx context.Context, in *QueryProposalSinceIdRequest, opts ...grpc.CallOption) (*QueryProposalSinceIdResponse, error) {
	out := new(QueryProposalSinceIdResponse)
	err := c.cc.Invoke(ctx, "/kyve.registry.v1beta1.Query/ProposalSinceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// StakersList returns all staker addresses with their corresponding staking amount for a given pool
	StakersList(context.Context, *QueryStakersListRequest) (*QueryStakersListResponse, error)
	// Staker returns all staker info
	Staker(context.Context, *QueryStakerRequest) (*QueryStakerResponse, error)
	// ProposalByHeight ...
	ProposalByHeight(context.Context, *QueryProposalByHeightRequest) (*QueryProposalByHeightResponse, error)
	// ProposalSinceFinalizedAt ...
	ProposalSinceFinalizedAt(context.Context, *QueryProposalSinceFinalizedAtRequest) (*QueryProposalSinceFinalizedAtResponse, error)
	// ProposalSinceId ...
	ProposalSinceId(context.Context, *QueryProposalSinceIdRequest) (*QueryProposalSinceIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) StakersList(ctx context.Context, req *QueryStakersListRequest) (*QueryStakersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakersList not implemented")
}
func (*UnimplementedQueryServer) Staker(ctx context.Context, req *QueryStakerRequest) (*QueryStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Staker not implemented")
}
func (*UnimplementedQueryServer) ProposalByHeight(ctx context.Context, req *QueryProposalByHeightRequest) (*QueryProposalByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalByHeight not implemented")
}
func (*UnimplementedQueryServer) ProposalSinceFinalizedAt(ctx context.Context, req *QueryProposalSinceFinalizedAtRequest) (*QueryProposalSinceFinalizedAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalSinceFinalizedAt not implemented")
}
func (*UnimplementedQueryServer) ProposalSinceId(ctx context.Context, req *QueryProposalSinceIdRequest) (*QueryProposalSinceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalSinceId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_StakersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.registry.v1beta1.Query/StakersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakersList(ctx, req.(*QueryStakersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Staker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Staker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.registry.v1beta1.Query/Staker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Staker(ctx, req.(*QueryStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposalByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposalByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.registry.v1beta1.Query/ProposalByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposalByHeight(ctx, req.(*QueryProposalByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposalSinceFinalizedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalSinceFinalizedAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposalSinceFinalizedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.registry.v1beta1.Query/ProposalSinceFinalizedAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposalSinceFinalizedAt(ctx, req.(*QueryProposalSinceFinalizedAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposalSinceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalSinceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposalSinceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.registry.v1beta1.Query/ProposalSinceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposalSinceId(ctx, req.(*QueryProposalSinceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.registry.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StakersList",
			Handler:    _Query_StakersList_Handler,
		},
		{
			MethodName: "Staker",
			Handler:    _Query_Staker_Handler,
		},
		{
			MethodName: "ProposalByHeight",
			Handler:    _Query_ProposalByHeight_Handler,
		},
		{
			MethodName: "ProposalSinceFinalizedAt",
			Handler:    _Query_ProposalSinceFinalizedAt_Handler,
		},
		{
			MethodName: "ProposalSinceId",
			Handler:    _Query_ProposalSinceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/registry/v1beta1/query.proto",
}

func (m *QueryStakersListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakersListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staker != nil {
		{
			size, err := m.Staker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingCommissionChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingCommissionChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingCommissionChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishDate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FinishDate))
		i--
		dAtA[i] = 0x18
	}
	if m.CreationDate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NewCommission) > 0 {
		i -= len(m.NewCommission)
		copy(dAtA[i:], m.NewCommission)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NewCommission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingCommissionChange != nil {
		{
			size, err := m.PendingCommissionChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.UploadProbability) > 0 {
		i -= len(m.UploadProbability)
		copy(dAtA[i:], m.UploadProbability)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UploadProbability)))
		i--
		dAtA[i] = 0x62
	}
	if m.UnbondingAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnbondingAmount))
		i--
		dAtA[i] = 0x58
	}
	if m.Points != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x32
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProposalSinceFinalizedAtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalSinceFinalizedAtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalSinceFinalizedAtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalizedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FinalizedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalSinceFinalizedAtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalSinceFinalizedAtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalSinceFinalizedAtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalSinceIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalSinceIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalSinceIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalSinceIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalSinceIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalSinceIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStakersListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakersListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for _, e := range m.Stakers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staker != nil {
		l = m.Staker.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PendingCommissionChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewCommission)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CreationDate != 0 {
		n += 1 + sovQuery(uint64(m.CreationDate))
	}
	if m.FinishDate != 0 {
		n += 1 + sovQuery(uint64(m.FinishDate))
	}
	return n
}

func (m *StakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovQuery(uint64(m.TotalDelegation))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Points != 0 {
		n += 1 + sovQuery(uint64(m.Points))
	}
	if m.UnbondingAmount != 0 {
		n += 1 + sovQuery(uint64(m.UnbondingAmount))
	}
	l = len(m.UploadProbability)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.PendingCommissionChange != nil {
		l = m.PendingCommissionChange.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProposalByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryProposalByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProposalSinceFinalizedAtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.FinalizedAt != 0 {
		n += 1 + sovQuery(uint64(m.FinalizedAt))
	}
	return n
}

func (m *QueryProposalSinceFinalizedAtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProposalSinceIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryProposalSinceIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStakersListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StakerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakersListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, &StakerResponse{})
			if err := m.Stakers[len(m.Stakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staker == nil {
				m.Staker = &StakerResponse{}
			}
			if err := m.Staker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingCommissionChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingCommissionChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingCommissionChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCommission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCommission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishDate", wireType)
			}
			m.FinishDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmount", wireType)
			}
			m.UnbondingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadProbability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadProbability = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StakerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCommissionChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingCommissionChange == nil {
				m.PendingCommissionChange = &PendingCommissionChange{}
			}
			if err := m.PendingCommissionChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalSinceFinalizedAtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalSinceFinalizedAtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalSinceFinalizedAtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedAt", wireType)
			}
			m.FinalizedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalSinceFinalizedAtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalSinceFinalizedAtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalSinceFinalizedAtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, Proposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalSinceIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalSinceIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalSinceIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalSinceIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalSinceIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalSinceIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, Proposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
