// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/delegation/v1beta1/delegation.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Delegator ...
type Delegator struct {
	// k_index ...
	KIndex uint64 `protobuf:"varint,1,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// delegator ...
	Delegator string `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// delegation_amount ...
	DelegationAmount uint64 `protobuf:"varint,4,opt,name=delegation_amount,json=delegationAmount,proto3" json:"delegation_amount,omitempty"`
}

func (m *Delegator) Reset()         { *m = Delegator{} }
func (m *Delegator) String() string { return proto.CompactTextString(m) }
func (*Delegator) ProtoMessage()    {}
func (*Delegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{0}
}
func (m *Delegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegator.Merge(m, src)
}
func (m *Delegator) XXX_Size() int {
	return m.Size()
}
func (m *Delegator) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegator.DiscardUnknown(m)
}

var xxx_messageInfo_Delegator proto.InternalMessageInfo

func (m *Delegator) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

func (m *Delegator) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *Delegator) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *Delegator) GetDelegationAmount() uint64 {
	if m != nil {
		return m.DelegationAmount
	}
	return 0
}

// DelegationEntries ...
type DelegationEntries struct {
	// balance ...
	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// k_index ...
	KIndex uint64 `protobuf:"varint,3,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
}

func (m *DelegationEntries) Reset()         { *m = DelegationEntries{} }
func (m *DelegationEntries) String() string { return proto.CompactTextString(m) }
func (*DelegationEntries) ProtoMessage()    {}
func (*DelegationEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{1}
}
func (m *DelegationEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationEntries.Merge(m, src)
}
func (m *DelegationEntries) XXX_Size() int {
	return m.Size()
}
func (m *DelegationEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationEntries.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationEntries proto.InternalMessageInfo

func (m *DelegationEntries) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *DelegationEntries) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationEntries) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

// DelegationPoolData ...
type DelegationPoolData struct {
	// id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// current_rewards ...
	CurrentRewards uint64 `protobuf:"varint,3,opt,name=current_rewards,json=currentRewards,proto3" json:"current_rewards,omitempty"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,4,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// latest_index_k ...
	LatestIndexK uint64 `protobuf:"varint,5,opt,name=latest_index_k,json=latestIndexK,proto3" json:"latest_index_k,omitempty"`
	// delegator_count ...
	DelegatorCount uint64 `protobuf:"varint,6,opt,name=delegator_count,json=delegatorCount,proto3" json:"delegator_count,omitempty"`
	// latest_index_was_undelegation ...
	LatestIndexWasUndelegation bool `protobuf:"varint,7,opt,name=latest_index_was_undelegation,json=latestIndexWasUndelegation,proto3" json:"latest_index_was_undelegation,omitempty"`
}

func (m *DelegationPoolData) Reset()         { *m = DelegationPoolData{} }
func (m *DelegationPoolData) String() string { return proto.CompactTextString(m) }
func (*DelegationPoolData) ProtoMessage()    {}
func (*DelegationPoolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{2}
}
func (m *DelegationPoolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationPoolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationPoolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationPoolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationPoolData.Merge(m, src)
}
func (m *DelegationPoolData) XXX_Size() int {
	return m.Size()
}
func (m *DelegationPoolData) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationPoolData.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationPoolData proto.InternalMessageInfo

func (m *DelegationPoolData) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *DelegationPoolData) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationPoolData) GetCurrentRewards() uint64 {
	if m != nil {
		return m.CurrentRewards
	}
	return 0
}

func (m *DelegationPoolData) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *DelegationPoolData) GetLatestIndexK() uint64 {
	if m != nil {
		return m.LatestIndexK
	}
	return 0
}

func (m *DelegationPoolData) GetDelegatorCount() uint64 {
	if m != nil {
		return m.DelegatorCount
	}
	return 0
}

func (m *DelegationPoolData) GetLatestIndexWasUndelegation() bool {
	if m != nil {
		return m.LatestIndexWasUndelegation
	}
	return false
}

func init() {
	proto.RegisterType((*Delegator)(nil), "kyve.delegation.v1beta1.Delegator")
	proto.RegisterType((*DelegationEntries)(nil), "kyve.delegation.v1beta1.DelegationEntries")
	proto.RegisterType((*DelegationPoolData)(nil), "kyve.delegation.v1beta1.DelegationPoolData")
}

func init() {
	proto.RegisterFile("kyve/delegation/v1beta1/delegation.proto", fileDescriptor_e07f10cb3da486ac)
}

var fileDescriptor_e07f10cb3da486ac = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0xea, 0xd3, 0x30,
	0x1c, 0xc5, 0x97, 0xdf, 0x66, 0x67, 0x83, 0xec, 0x4f, 0x10, 0x57, 0x86, 0x96, 0x31, 0x04, 0x2b,
	0xc2, 0xca, 0xf0, 0x09, 0xa6, 0xdb, 0xc5, 0x18, 0x88, 0x14, 0x54, 0xf4, 0xc2, 0x90, 0xb6, 0xa1,
	0x2b, 0xed, 0x92, 0x91, 0xa6, 0xfb, 0xf3, 0x04, 0xde, 0xfa, 0x1e, 0xbe, 0x88, 0x97, 0xbb, 0xf4,
	0x52, 0xb6, 0x17, 0x91, 0xa6, 0xdd, 0x1a, 0x2f, 0x76, 0xd7, 0xef, 0x27, 0xa7, 0xdf, 0x73, 0x4e,
	0x08, 0x74, 0x92, 0xe3, 0x8e, 0xba, 0x21, 0x4d, 0x69, 0x44, 0x64, 0xcc, 0x99, 0xbb, 0x9b, 0xfa,
	0x54, 0x92, 0xa9, 0x86, 0x26, 0x5b, 0xc1, 0x25, 0x47, 0x83, 0x42, 0x39, 0xd1, 0x70, 0xa5, 0x1c,
	0x3e, 0x8d, 0x78, 0xc4, 0x95, 0xc6, 0x2d, 0xbe, 0x4a, 0xf9, 0xf8, 0x07, 0x80, 0xe6, 0xbc, 0x14,
	0x73, 0x81, 0x06, 0xb0, 0x9d, 0xe0, 0x98, 0x85, 0xf4, 0x60, 0x81, 0x11, 0x70, 0x5a, 0x9e, 0x91,
	0x2c, 0x8b, 0x09, 0x3d, 0x83, 0x46, 0x26, 0x49, 0x42, 0x85, 0xf5, 0x30, 0x02, 0x8e, 0xe9, 0x55,
	0x13, 0x7a, 0x0e, 0xcd, 0xf0, 0xfa, 0xb7, 0xd5, 0x54, 0x47, 0x35, 0x40, 0x6f, 0x60, 0xbf, 0x0e,
	0x82, 0xc9, 0x86, 0xe7, 0x4c, 0x5a, 0x2d, 0xb5, 0xb8, 0x57, 0x1f, 0xcc, 0x14, 0x1f, 0x7f, 0x87,
	0xfd, 0xf9, 0x8d, 0x2d, 0x98, 0x14, 0x31, 0xcd, 0x90, 0x05, 0xdb, 0x3e, 0x49, 0x09, 0x0b, 0xa8,
	0x0a, 0x64, 0x7a, 0xd7, 0xf1, 0x6e, 0x22, 0xad, 0x42, 0x53, 0xaf, 0x30, 0xfe, 0xf5, 0x00, 0x51,
	0x6d, 0xf0, 0x91, 0xf3, 0x74, 0x4e, 0x24, 0x29, 0xf4, 0x5b, 0xce, 0x53, 0x1c, 0x87, 0xd7, 0xca,
	0xc5, 0xb8, 0x0c, 0xef, 0x1a, 0xbc, 0x82, 0xdd, 0x20, 0x17, 0x82, 0x32, 0x89, 0x05, 0xdd, 0x13,
	0x11, 0x66, 0x95, 0x51, 0xa7, 0xc2, 0x5e, 0x49, 0xd1, 0x6b, 0xd8, 0x93, 0x5c, 0x92, 0x14, 0xd7,
	0x55, 0xab, 0xf2, 0x5d, 0xc5, 0xeb, 0x30, 0xe8, 0x25, 0xec, 0xa4, 0x44, 0xd2, 0x4c, 0x96, 0xc9,
	0x71, 0x62, 0x3d, 0x52, 0xc2, 0x27, 0x25, 0x55, 0x05, 0x56, 0x85, 0xf3, 0xed, 0x6e, 0x71, 0xa0,
	0x2e, 0xd3, 0x28, 0x9d, 0x6f, 0xf8, 0x7d, 0x41, 0xd1, 0x0c, 0xbe, 0xf8, 0x6f, 0xdd, 0x9e, 0x64,
	0x38, 0x67, 0x5a, 0x8c, 0xf6, 0x08, 0x38, 0x8f, 0xbd, 0xa1, 0xb6, 0xfd, 0x0b, 0xc9, 0x3e, 0x69,
	0x8a, 0x77, 0xcb, 0xdf, 0x67, 0x1b, 0x9c, 0xce, 0x36, 0xf8, 0x7b, 0xb6, 0xc1, 0xcf, 0x8b, 0xdd,
	0x38, 0x5d, 0xec, 0xc6, 0x9f, 0x8b, 0xdd, 0xf8, 0xe6, 0x46, 0xb1, 0x5c, 0xe7, 0xfe, 0x24, 0xe0,
	0x1b, 0x77, 0xf5, 0xf5, 0xf3, 0xe2, 0x03, 0x95, 0x7b, 0x2e, 0x12, 0x37, 0x58, 0x93, 0x98, 0xb9,
	0x07, 0xfd, 0x91, 0xca, 0xe3, 0x96, 0x66, 0xbe, 0xa1, 0x5e, 0xda, 0xdb, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc7, 0xed, 0xa3, 0xa2, 0xc4, 0x02, 0x00, 0x00,
}

func (m *Delegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegationAmount != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.DelegationAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.KIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationPoolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationPoolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationPoolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestIndexWasUndelegation {
		i--
		if m.LatestIndexWasUndelegation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DelegatorCount != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.DelegatorCount))
		i--
		dAtA[i] = 0x30
	}
	if m.LatestIndexK != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.LatestIndexK))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentRewards != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CurrentRewards))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Delegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KIndex != 0 {
		n += 1 + sovDelegation(uint64(m.KIndex))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.DelegationAmount != 0 {
		n += 1 + sovDelegation(uint64(m.DelegationAmount))
	}
	return n
}

func (m *DelegationEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.KIndex != 0 {
		n += 1 + sovDelegation(uint64(m.KIndex))
	}
	return n
}

func (m *DelegationPoolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovDelegation(uint64(m.PoolId))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.CurrentRewards != 0 {
		n += 1 + sovDelegation(uint64(m.CurrentRewards))
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovDelegation(uint64(m.TotalDelegation))
	}
	if m.LatestIndexK != 0 {
		n += 1 + sovDelegation(uint64(m.LatestIndexK))
	}
	if m.DelegatorCount != 0 {
		n += 1 + sovDelegation(uint64(m.DelegatorCount))
	}
	if m.LatestIndexWasUndelegation {
		n += 2
	}
	return n
}

func sovDelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegation(x uint64) (n int) {
	return sovDelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Delegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			m.DelegationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationPoolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationPoolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationPoolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			m.CurrentRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRewards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexK", wireType)
			}
			m.LatestIndexK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestIndexK |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorCount", wireType)
			}
			m.DelegatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexWasUndelegation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LatestIndexWasUndelegation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegation = fmt.Errorf("proto: unexpected end of group")
)
