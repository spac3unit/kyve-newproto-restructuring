// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/stakers/v1beta1/stakers.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SlashType ...
type SlashType int32

const (
	// SLASH_TYPE_UNSPECIFIED ...
	SLASH_TYPE_UNSPECIFIED SlashType = 0
	// SLASH_TYPE_TIMEOUT ...
	SLASH_TYPE_TIMEOUT SlashType = 1
	// SLASH_TYPE_VOTE ...
	SLASH_TYPE_VOTE SlashType = 2
	// SLASH_TYPE_UPLOAD ...
	SLASH_TYPE_UPLOAD SlashType = 3
)

var SlashType_name = map[int32]string{
	0: "SLASH_TYPE_UNSPECIFIED",
	1: "SLASH_TYPE_TIMEOUT",
	2: "SLASH_TYPE_VOTE",
	3: "SLASH_TYPE_UPLOAD",
}

var SlashType_value = map[string]int32{
	"SLASH_TYPE_UNSPECIFIED": 0,
	"SLASH_TYPE_TIMEOUT":     1,
	"SLASH_TYPE_VOTE":        2,
	"SLASH_TYPE_UPLOAD":      3,
}

func (x SlashType) String() string {
	return proto.EnumName(SlashType_name, int32(x))
}

func (SlashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d209d1a2a74d375d, []int{0}
}

// StakerStatus ...
type StakerStatus int32

const (
	// STAKER_STATUS_UNSPECIFIED ...
	STAKER_STATUS_UNSPECIFIED StakerStatus = 0
	// STAKER_STATUS_ACTIVE ...
	STAKER_STATUS_ACTIVE StakerStatus = 1
	// STAKER_STATUS_INACTIVE ...
	STAKER_STATUS_INACTIVE StakerStatus = 2
)

var StakerStatus_name = map[int32]string{
	0: "STAKER_STATUS_UNSPECIFIED",
	1: "STAKER_STATUS_ACTIVE",
	2: "STAKER_STATUS_INACTIVE",
}

var StakerStatus_value = map[string]int32{
	"STAKER_STATUS_UNSPECIFIED": 0,
	"STAKER_STATUS_ACTIVE":      1,
	"STAKER_STATUS_INACTIVE":    2,
}

func (x StakerStatus) String() string {
	return proto.EnumName(StakerStatus_name, int32(x))
}

func (StakerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d209d1a2a74d375d, []int{1}
}

// Staker ...
type Staker struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pools
	Pools []uint64 `protobuf:"varint,2,rep,packed,name=pools,proto3" json:"pools,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// unbonding_amount ...
	UnbondingAmount uint64 `protobuf:"varint,4,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	// commission ...
	Commission string `protobuf:"bytes,5,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,6,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website ...
	Website string `protobuf:"bytes,7,opt,name=website,proto3" json:"website,omitempty"`
	// logo
	Logo string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
	// points // TODO should points be in bundles or make method to increase points ?
	Points uint64 `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
	// status
	Status StakerStatus `protobuf:"varint,10,opt,name=status,proto3,enum=kyve.stakers.v1beta1.StakerStatus" json:"status,omitempty"`
}

func (m *Staker) Reset()         { *m = Staker{} }
func (m *Staker) String() string { return proto.CompactTextString(m) }
func (*Staker) ProtoMessage()    {}
func (*Staker) Descriptor() ([]byte, []int) {
	return fileDescriptor_d209d1a2a74d375d, []int{0}
}
func (m *Staker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staker.Merge(m, src)
}
func (m *Staker) XXX_Size() int {
	return m.Size()
}
func (m *Staker) XXX_DiscardUnknown() {
	xxx_messageInfo_Staker.DiscardUnknown(m)
}

var xxx_messageInfo_Staker proto.InternalMessageInfo

func (m *Staker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Staker) GetPools() []uint64 {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *Staker) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Staker) GetUnbondingAmount() uint64 {
	if m != nil {
		return m.UnbondingAmount
	}
	return 0
}

func (m *Staker) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *Staker) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Staker) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Staker) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Staker) GetPoints() uint64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *Staker) GetStatus() StakerStatus {
	if m != nil {
		return m.Status
	}
	return STAKER_STATUS_UNSPECIFIED
}

// UnbondingStakingEntry
// Creates an entry for an upcoming unbonding of a staker which is put in the unbonding fifo queue and
// executed after the unbonding time is over.
type UnbondingStakingQueueEntry struct {
	// index is a monotonically increasing integer to order the entries
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// creation_time ...
	CreationTime uint64 `protobuf:"varint,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (m *UnbondingStakingQueueEntry) Reset()         { *m = UnbondingStakingQueueEntry{} }
func (m *UnbondingStakingQueueEntry) String() string { return proto.CompactTextString(m) }
func (*UnbondingStakingQueueEntry) ProtoMessage()    {}
func (*UnbondingStakingQueueEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d209d1a2a74d375d, []int{1}
}
func (m *UnbondingStakingQueueEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingStakingQueueEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingStakingQueueEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingStakingQueueEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingStakingQueueEntry.Merge(m, src)
}
func (m *UnbondingStakingQueueEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingStakingQueueEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingStakingQueueEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingStakingQueueEntry proto.InternalMessageInfo

func (m *UnbondingStakingQueueEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *UnbondingStakingQueueEntry) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *UnbondingStakingQueueEntry) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UnbondingStakingQueueEntry) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

// UnbondingState stores the state for the unbonding of stakes and delegations.
type UnbondingStakingQueueState struct {
	// low_index ...
	LowIndex uint64 `protobuf:"varint,1,opt,name=low_index,json=lowIndex,proto3" json:"low_index,omitempty"`
	// high_index ...
	HighIndex uint64 `protobuf:"varint,2,opt,name=high_index,json=highIndex,proto3" json:"high_index,omitempty"`
}

func (m *UnbondingStakingQueueState) Reset()         { *m = UnbondingStakingQueueState{} }
func (m *UnbondingStakingQueueState) String() string { return proto.CompactTextString(m) }
func (*UnbondingStakingQueueState) ProtoMessage()    {}
func (*UnbondingStakingQueueState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d209d1a2a74d375d, []int{2}
}
func (m *UnbondingStakingQueueState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingStakingQueueState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingStakingQueueState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingStakingQueueState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingStakingQueueState.Merge(m, src)
}
func (m *UnbondingStakingQueueState) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingStakingQueueState) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingStakingQueueState.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingStakingQueueState proto.InternalMessageInfo

func (m *UnbondingStakingQueueState) GetLowIndex() uint64 {
	if m != nil {
		return m.LowIndex
	}
	return 0
}

func (m *UnbondingStakingQueueState) GetHighIndex() uint64 {
	if m != nil {
		return m.HighIndex
	}
	return 0
}

func init() {
	proto.RegisterEnum("kyve.stakers.v1beta1.SlashType", SlashType_name, SlashType_value)
	proto.RegisterEnum("kyve.stakers.v1beta1.StakerStatus", StakerStatus_name, StakerStatus_value)
	proto.RegisterType((*Staker)(nil), "kyve.stakers.v1beta1.Staker")
	proto.RegisterType((*UnbondingStakingQueueEntry)(nil), "kyve.stakers.v1beta1.UnbondingStakingQueueEntry")
	proto.RegisterType((*UnbondingStakingQueueState)(nil), "kyve.stakers.v1beta1.UnbondingStakingQueueState")
}

func init() {
	proto.RegisterFile("kyve/stakers/v1beta1/stakers.proto", fileDescriptor_d209d1a2a74d375d)
}

var fileDescriptor_d209d1a2a74d375d = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4d, 0x6e, 0xd3, 0x4c,
	0x1c, 0xc6, 0xe3, 0x34, 0x4d, 0x9b, 0xbf, 0xfa, 0xbe, 0x35, 0x43, 0xa8, 0x86, 0xa0, 0x5a, 0x51,
	0xd8, 0x84, 0x0a, 0xc5, 0x2a, 0xec, 0xd8, 0x99, 0xd6, 0x15, 0x56, 0x4b, 0x5b, 0x6c, 0xa7, 0xa2,
	0x6c, 0x2c, 0x27, 0x19, 0x39, 0xa3, 0xc4, 0x33, 0xc1, 0x33, 0x6e, 0x9a, 0x13, 0xc0, 0x92, 0x3b,
	0x70, 0x08, 0xae, 0xc0, 0xb2, 0x4b, 0x96, 0xa8, 0xb9, 0x08, 0xf2, 0xd8, 0xa9, 0x5c, 0x44, 0x77,
	0x7e, 0x3e, 0x32, 0xf3, 0xcb, 0x23, 0x0d, 0x74, 0x26, 0x8b, 0x2b, 0x62, 0x0a, 0x19, 0x4e, 0x48,
	0x22, 0xcc, 0xab, 0xfd, 0x01, 0x91, 0xe1, 0xfe, 0x4a, 0xf7, 0x66, 0x09, 0x97, 0x1c, 0x35, 0xb3,
	0x4e, 0x6f, 0xe5, 0x15, 0x9d, 0x56, 0x33, 0xe2, 0x11, 0x57, 0x05, 0x33, 0xfb, 0xca, 0xbb, 0x9d,
	0x1f, 0x55, 0xa8, 0x7b, 0xaa, 0x89, 0x30, 0x6c, 0x84, 0xa3, 0x51, 0x42, 0x84, 0xc0, 0x5a, 0x5b,
	0xeb, 0x36, 0xdc, 0x95, 0x44, 0x4d, 0x58, 0x9f, 0x71, 0x3e, 0x15, 0xb8, 0xda, 0x5e, 0xeb, 0xd6,
	0xdc, 0x5c, 0xa0, 0x1d, 0xa8, 0x87, 0x31, 0x4f, 0x99, 0xc4, 0x6b, 0x6d, 0xad, 0x5b, 0x73, 0x0b,
	0x85, 0x5e, 0x80, 0x9e, 0xb2, 0x01, 0x67, 0x23, 0xca, 0xa2, 0xa0, 0x68, 0xd4, 0x54, 0x63, 0xfb,
	0xce, 0xb7, 0xf2, 0xaa, 0x01, 0x30, 0xe4, 0x71, 0x4c, 0x85, 0xa0, 0x9c, 0xe1, 0x75, 0x75, 0x6b,
	0xc9, 0xc9, 0x90, 0x62, 0xce, 0xe8, 0x84, 0x24, 0xb8, 0x9e, 0x23, 0x15, 0x32, 0x4b, 0xe6, 0x64,
	0x20, 0xa8, 0x24, 0x78, 0x23, 0x4f, 0x0a, 0x89, 0x10, 0xd4, 0xa6, 0x3c, 0xe2, 0x78, 0x53, 0xd9,
	0xea, 0x3b, 0x43, 0x9d, 0x71, 0xca, 0xa4, 0xc0, 0x8d, 0x1c, 0x35, 0x57, 0xe8, 0x0d, 0xd4, 0x85,
	0x0c, 0x65, 0x2a, 0x30, 0xb4, 0xb5, 0xee, 0xff, 0xaf, 0x3a, 0xbd, 0x7f, 0x4d, 0xd7, 0xcb, 0x07,
	0xf2, 0x54, 0xd3, 0x2d, 0x7e, 0xd1, 0xf9, 0xa2, 0x41, 0xab, 0xbf, 0xfa, 0x3f, 0x59, 0x83, 0xb2,
	0xe8, 0x43, 0x4a, 0x52, 0x62, 0x33, 0x99, 0x2c, 0xb2, 0xcd, 0x28, 0x1b, 0x91, 0x6b, 0xb5, 0x65,
	0xcd, 0xcd, 0x45, 0x06, 0x92, 0x1f, 0x8e, 0xab, 0x0a, 0xaf, 0x50, 0x0f, 0x6e, 0xf9, 0x1c, 0xfe,
	0x1b, 0x26, 0x24, 0x94, 0x94, 0xb3, 0x40, 0xd2, 0x98, 0x14, 0x43, 0x6e, 0xad, 0x4c, 0x9f, 0xc6,
	0xa4, 0xf3, 0xf1, 0x01, 0x90, 0x0c, 0x98, 0xa0, 0x67, 0xd0, 0x98, 0xf2, 0x79, 0x50, 0x86, 0xd9,
	0x9c, 0xf2, 0xb9, 0xa3, 0x78, 0x76, 0x01, 0xc6, 0x34, 0x1a, 0x17, 0x69, 0x55, 0xa5, 0x8d, 0xcc,
	0x51, 0xf1, 0xde, 0x67, 0x68, 0x78, 0xd3, 0x50, 0x8c, 0xfd, 0xc5, 0x8c, 0xa0, 0x16, 0xec, 0x78,
	0x27, 0x96, 0xf7, 0x2e, 0xf0, 0x2f, 0xcf, 0xed, 0xa0, 0x7f, 0xea, 0x9d, 0xdb, 0x07, 0xce, 0x91,
	0x63, 0x1f, 0xea, 0x15, 0xb4, 0x03, 0xa8, 0x94, 0xf9, 0xce, 0x7b, 0xfb, 0xac, 0xef, 0xeb, 0x1a,
	0x7a, 0x0c, 0xdb, 0x25, 0xff, 0xe2, 0xcc, 0xb7, 0xf5, 0x2a, 0x7a, 0x02, 0x8f, 0xca, 0x07, 0x9d,
	0x9f, 0x9c, 0x59, 0x87, 0xfa, 0x5a, 0xab, 0xf6, 0xf5, 0xbb, 0x51, 0xd9, 0xa3, 0xb0, 0x55, 0x9e,
	0x1b, 0xed, 0xc2, 0x53, 0xcf, 0xb7, 0x8e, 0x6d, 0x37, 0xf0, 0x7c, 0xcb, 0xef, 0x7b, 0x7f, 0x5d,
	0x8c, 0xa1, 0x79, 0x3f, 0xb6, 0x0e, 0x7c, 0xe7, 0xc2, 0xd6, 0x35, 0x85, 0x7b, 0x2f, 0x71, 0x4e,
	0x8b, 0xac, 0x9a, 0x5f, 0xf5, 0xf6, 0xe8, 0xe7, 0xad, 0xa1, 0xdd, 0xdc, 0x1a, 0xda, 0xef, 0x5b,
	0x43, 0xfb, 0xb6, 0x34, 0x2a, 0x37, 0x4b, 0xa3, 0xf2, 0x6b, 0x69, 0x54, 0x3e, 0xbd, 0x8c, 0xa8,
	0x1c, 0xa7, 0x83, 0xde, 0x90, 0xc7, 0xe6, 0xf1, 0xe5, 0x85, 0x7d, 0x4a, 0xe4, 0x9c, 0x27, 0x13,
	0x73, 0x38, 0x0e, 0x29, 0x33, 0xaf, 0xef, 0xde, 0x9f, 0x5c, 0xcc, 0x88, 0x18, 0xd4, 0xd5, 0x53,
	0x7a, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x94, 0x86, 0x36, 0xf3, 0x9c, 0x03, 0x00, 0x00,
}

func (m *Staker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.Points != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnbondingAmount != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.UnbondingAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pools) > 0 {
		dAtA2 := make([]byte, len(m.Pools)*10)
		var j1 int
		for _, num := range m.Pools {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStakers(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingStakingQueueEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingStakingQueueEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingStakingQueueEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationTime != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingStakingQueueState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingStakingQueueState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingStakingQueueState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HighIndex != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.HighIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.LowIndex != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.LowIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakers(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Staker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	if len(m.Pools) > 0 {
		l = 0
		for _, e := range m.Pools {
			l += sovStakers(uint64(e))
		}
		n += 1 + sovStakers(uint64(l)) + l
	}
	if m.Amount != 0 {
		n += 1 + sovStakers(uint64(m.Amount))
	}
	if m.UnbondingAmount != 0 {
		n += 1 + sovStakers(uint64(m.UnbondingAmount))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	if m.Points != 0 {
		n += 1 + sovStakers(uint64(m.Points))
	}
	if m.Status != 0 {
		n += 1 + sovStakers(uint64(m.Status))
	}
	return n
}

func (m *UnbondingStakingQueueEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovStakers(uint64(m.Index))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovStakers(uint64(m.Amount))
	}
	if m.CreationTime != 0 {
		n += 1 + sovStakers(uint64(m.CreationTime))
	}
	return n
}

func (m *UnbondingStakingQueueState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowIndex != 0 {
		n += 1 + sovStakers(uint64(m.LowIndex))
	}
	if m.HighIndex != 0 {
		n += 1 + sovStakers(uint64(m.HighIndex))
	}
	return n
}

func sovStakers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakers(x uint64) (n int) {
	return sovStakers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Staker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStakers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pools = append(m.Pools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStakers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStakers
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStakers
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pools) == 0 {
					m.Pools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStakers
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pools = append(m.Pools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmount", wireType)
			}
			m.UnbondingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StakerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingStakingQueueEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingStakingQueueEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingStakingQueueEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingStakingQueueState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingStakingQueueState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingStakingQueueState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
			}
			m.LowIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
			}
			m.HighIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakers = fmt.Errorf("proto: unexpected end of group")
)
