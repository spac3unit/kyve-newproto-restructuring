// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/pool/v1beta1/gov.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GovMsgCreatePool defines a SDK message for creating a pool.
type GovMsgCreatePool struct {
	// title ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// name ...
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	// config ...
	Config string `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// start_key ...
	StartKey string `protobuf:"bytes,7,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// upload_interval ...
	UploadInterval uint64 `protobuf:"varint,8,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// operating_cost ...
	OperatingCost uint64 `protobuf:"varint,9,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// min_stake ...
	MinStake uint64 `protobuf:"varint,10,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// max_bundle_size ...
	MaxBundleSize uint64 `protobuf:"varint,11,opt,name=max_bundle_size,json=maxBundleSize,proto3" json:"max_bundle_size,omitempty"`
	// version ...
	Version string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// binaries ...
	Binaries string `protobuf:"bytes,13,opt,name=binaries,proto3" json:"binaries,omitempty"`
}

func (m *GovMsgCreatePool) Reset()         { *m = GovMsgCreatePool{} }
func (m *GovMsgCreatePool) String() string { return proto.CompactTextString(m) }
func (*GovMsgCreatePool) ProtoMessage()    {}
func (*GovMsgCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{0}
}
func (m *GovMsgCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgCreatePool.Merge(m, src)
}
func (m *GovMsgCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgCreatePool proto.InternalMessageInfo

func (m *GovMsgCreatePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgCreatePool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GovMsgCreatePool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *GovMsgCreatePool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *GovMsgCreatePool) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *GovMsgCreatePool) GetStartKey() string {
	if m != nil {
		return m.StartKey
	}
	return ""
}

func (m *GovMsgCreatePool) GetUploadInterval() uint64 {
	if m != nil {
		return m.UploadInterval
	}
	return 0
}

func (m *GovMsgCreatePool) GetOperatingCost() uint64 {
	if m != nil {
		return m.OperatingCost
	}
	return 0
}

func (m *GovMsgCreatePool) GetMinStake() uint64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *GovMsgCreatePool) GetMaxBundleSize() uint64 {
	if m != nil {
		return m.MaxBundleSize
	}
	return 0
}

func (m *GovMsgCreatePool) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GovMsgCreatePool) GetBinaries() string {
	if m != nil {
		return m.Binaries
	}
	return ""
}

// GovMsgCreatePoolResponse ...
type GovMsgCreatePoolResponse struct {
}

func (m *GovMsgCreatePoolResponse) Reset()         { *m = GovMsgCreatePoolResponse{} }
func (m *GovMsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgCreatePoolResponse) ProtoMessage()    {}
func (*GovMsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{1}
}
func (m *GovMsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgCreatePoolResponse.Merge(m, src)
}
func (m *GovMsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgCreatePoolResponse proto.InternalMessageInfo

// GovMsgUpdatePool is a gov Content type for updating a pool.
type GovMsgUpdatePool struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// payload
	Payload string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *GovMsgUpdatePool) Reset()         { *m = GovMsgUpdatePool{} }
func (m *GovMsgUpdatePool) String() string { return proto.CompactTextString(m) }
func (*GovMsgUpdatePool) ProtoMessage()    {}
func (*GovMsgUpdatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{2}
}
func (m *GovMsgUpdatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgUpdatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgUpdatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgUpdatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgUpdatePool.Merge(m, src)
}
func (m *GovMsgUpdatePool) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgUpdatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgUpdatePool.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgUpdatePool proto.InternalMessageInfo

func (m *GovMsgUpdatePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgUpdatePool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GovMsgUpdatePool) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// GovMsgUpdatePoolResponse ...
type GovMsgUpdatePoolResponse struct {
}

func (m *GovMsgUpdatePoolResponse) Reset()         { *m = GovMsgUpdatePoolResponse{} }
func (m *GovMsgUpdatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgUpdatePoolResponse) ProtoMessage()    {}
func (*GovMsgUpdatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{3}
}
func (m *GovMsgUpdatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgUpdatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgUpdatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgUpdatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgUpdatePoolResponse.Merge(m, src)
}
func (m *GovMsgUpdatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgUpdatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgUpdatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgUpdatePoolResponse proto.InternalMessageInfo

// PausePoolProposal is a gov Content type for pausing a pool.
type GovMsgPausePool struct {
	// title ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GovMsgPausePool) Reset()         { *m = GovMsgPausePool{} }
func (m *GovMsgPausePool) String() string { return proto.CompactTextString(m) }
func (*GovMsgPausePool) ProtoMessage()    {}
func (*GovMsgPausePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{4}
}
func (m *GovMsgPausePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgPausePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgPausePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgPausePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgPausePool.Merge(m, src)
}
func (m *GovMsgPausePool) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgPausePool) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgPausePool.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgPausePool proto.InternalMessageInfo

func (m *GovMsgPausePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgPausePool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GovMsgPausePoolResponse ...
type GovMsgPausePoolResponse struct {
}

func (m *GovMsgPausePoolResponse) Reset()         { *m = GovMsgPausePoolResponse{} }
func (m *GovMsgPausePoolResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgPausePoolResponse) ProtoMessage()    {}
func (*GovMsgPausePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{5}
}
func (m *GovMsgPausePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgPausePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgPausePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgPausePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgPausePoolResponse.Merge(m, src)
}
func (m *GovMsgPausePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgPausePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgPausePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgPausePoolResponse proto.InternalMessageInfo

// UnpausePoolProposal is a gov Content type for unpausing a pool.
type GovMsgUnpausePool struct {
	// title ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GovMsgUnpausePool) Reset()         { *m = GovMsgUnpausePool{} }
func (m *GovMsgUnpausePool) String() string { return proto.CompactTextString(m) }
func (*GovMsgUnpausePool) ProtoMessage()    {}
func (*GovMsgUnpausePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{6}
}
func (m *GovMsgUnpausePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgUnpausePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgUnpausePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgUnpausePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgUnpausePool.Merge(m, src)
}
func (m *GovMsgUnpausePool) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgUnpausePool) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgUnpausePool.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgUnpausePool proto.InternalMessageInfo

func (m *GovMsgUnpausePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgUnpausePool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GovMsgUnpausePoolResponse ...
type GovMsgUnpausePoolResponse struct {
}

func (m *GovMsgUnpausePoolResponse) Reset()         { *m = GovMsgUnpausePoolResponse{} }
func (m *GovMsgUnpausePoolResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgUnpausePoolResponse) ProtoMessage()    {}
func (*GovMsgUnpausePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{7}
}
func (m *GovMsgUnpausePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgUnpausePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgUnpausePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgUnpausePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgUnpausePoolResponse.Merge(m, src)
}
func (m *GovMsgUnpausePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgUnpausePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgUnpausePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgUnpausePoolResponse proto.InternalMessageInfo

// SchedulePoolUpgradeProposal is a gov Content type for upgrading a pool by the runtime.
type GovMsgPoolUpgrade struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// version ...
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// scheduled_at ...
	ScheduledAt uint64 `protobuf:"varint,4,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// duration ...
	Duration uint64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// binaries ...
	Binaries string `protobuf:"bytes,6,opt,name=binaries,proto3" json:"binaries,omitempty"`
}

func (m *GovMsgPoolUpgrade) Reset()         { *m = GovMsgPoolUpgrade{} }
func (m *GovMsgPoolUpgrade) String() string { return proto.CompactTextString(m) }
func (*GovMsgPoolUpgrade) ProtoMessage()    {}
func (*GovMsgPoolUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{8}
}
func (m *GovMsgPoolUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgPoolUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgPoolUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgPoolUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgPoolUpgrade.Merge(m, src)
}
func (m *GovMsgPoolUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgPoolUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgPoolUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgPoolUpgrade proto.InternalMessageInfo

func (m *GovMsgPoolUpgrade) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgPoolUpgrade) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *GovMsgPoolUpgrade) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GovMsgPoolUpgrade) GetScheduledAt() uint64 {
	if m != nil {
		return m.ScheduledAt
	}
	return 0
}

func (m *GovMsgPoolUpgrade) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GovMsgPoolUpgrade) GetBinaries() string {
	if m != nil {
		return m.Binaries
	}
	return ""
}

// GovMsgPoolUpgradeResponse ...
type GovMsgPoolUpgradeResponse struct {
}

func (m *GovMsgPoolUpgradeResponse) Reset()         { *m = GovMsgPoolUpgradeResponse{} }
func (m *GovMsgPoolUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgPoolUpgradeResponse) ProtoMessage()    {}
func (*GovMsgPoolUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{9}
}
func (m *GovMsgPoolUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgPoolUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgPoolUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgPoolUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgPoolUpgradeResponse.Merge(m, src)
}
func (m *GovMsgPoolUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgPoolUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgPoolUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgPoolUpgradeResponse proto.InternalMessageInfo

// CancelPoolUpgradeProposal is a gov Content type for cancelling a scheduled pool upgrade by the runtime.
type GovMsgCancelPoolUpgrade struct {
	// title ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
}

func (m *GovMsgCancelPoolUpgrade) Reset()         { *m = GovMsgCancelPoolUpgrade{} }
func (m *GovMsgCancelPoolUpgrade) String() string { return proto.CompactTextString(m) }
func (*GovMsgCancelPoolUpgrade) ProtoMessage()    {}
func (*GovMsgCancelPoolUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{10}
}
func (m *GovMsgCancelPoolUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgCancelPoolUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgCancelPoolUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgCancelPoolUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgCancelPoolUpgrade.Merge(m, src)
}
func (m *GovMsgCancelPoolUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgCancelPoolUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgCancelPoolUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgCancelPoolUpgrade proto.InternalMessageInfo

func (m *GovMsgCancelPoolUpgrade) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgCancelPoolUpgrade) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

// GovMsgCancelPoolUpgradeResponse ...
type GovMsgCancelPoolUpgradeResponse struct {
}

func (m *GovMsgCancelPoolUpgradeResponse) Reset()         { *m = GovMsgCancelPoolUpgradeResponse{} }
func (m *GovMsgCancelPoolUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgCancelPoolUpgradeResponse) ProtoMessage()    {}
func (*GovMsgCancelPoolUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{11}
}
func (m *GovMsgCancelPoolUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgCancelPoolUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgCancelPoolUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgCancelPoolUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgCancelPoolUpgradeResponse.Merge(m, src)
}
func (m *GovMsgCancelPoolUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgCancelPoolUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgCancelPoolUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgCancelPoolUpgradeResponse proto.InternalMessageInfo

// GovMsgResetPool ...
type GovMsgResetPool struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// id ...
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// bundle_id ...
	BundleId uint64 `protobuf:"varint,3,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
}

func (m *GovMsgResetPool) Reset()         { *m = GovMsgResetPool{} }
func (m *GovMsgResetPool) String() string { return proto.CompactTextString(m) }
func (*GovMsgResetPool) ProtoMessage()    {}
func (*GovMsgResetPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{12}
}
func (m *GovMsgResetPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgResetPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgResetPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgResetPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgResetPool.Merge(m, src)
}
func (m *GovMsgResetPool) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgResetPool) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgResetPool.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgResetPool proto.InternalMessageInfo

func (m *GovMsgResetPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GovMsgResetPool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GovMsgResetPool) GetBundleId() uint64 {
	if m != nil {
		return m.BundleId
	}
	return 0
}

// GovMsgResetPoolResponse ...
type GovMsgResetPoolResponse struct {
}

func (m *GovMsgResetPoolResponse) Reset()         { *m = GovMsgResetPoolResponse{} }
func (m *GovMsgResetPoolResponse) String() string { return proto.CompactTextString(m) }
func (*GovMsgResetPoolResponse) ProtoMessage()    {}
func (*GovMsgResetPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adce52e9478669ec, []int{13}
}
func (m *GovMsgResetPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovMsgResetPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovMsgResetPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovMsgResetPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovMsgResetPoolResponse.Merge(m, src)
}
func (m *GovMsgResetPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *GovMsgResetPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GovMsgResetPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GovMsgResetPoolResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GovMsgCreatePool)(nil), "kyve.pool.v1beta1.GovMsgCreatePool")
	proto.RegisterType((*GovMsgCreatePoolResponse)(nil), "kyve.pool.v1beta1.GovMsgCreatePoolResponse")
	proto.RegisterType((*GovMsgUpdatePool)(nil), "kyve.pool.v1beta1.GovMsgUpdatePool")
	proto.RegisterType((*GovMsgUpdatePoolResponse)(nil), "kyve.pool.v1beta1.GovMsgUpdatePoolResponse")
	proto.RegisterType((*GovMsgPausePool)(nil), "kyve.pool.v1beta1.GovMsgPausePool")
	proto.RegisterType((*GovMsgPausePoolResponse)(nil), "kyve.pool.v1beta1.GovMsgPausePoolResponse")
	proto.RegisterType((*GovMsgUnpausePool)(nil), "kyve.pool.v1beta1.GovMsgUnpausePool")
	proto.RegisterType((*GovMsgUnpausePoolResponse)(nil), "kyve.pool.v1beta1.GovMsgUnpausePoolResponse")
	proto.RegisterType((*GovMsgPoolUpgrade)(nil), "kyve.pool.v1beta1.GovMsgPoolUpgrade")
	proto.RegisterType((*GovMsgPoolUpgradeResponse)(nil), "kyve.pool.v1beta1.GovMsgPoolUpgradeResponse")
	proto.RegisterType((*GovMsgCancelPoolUpgrade)(nil), "kyve.pool.v1beta1.GovMsgCancelPoolUpgrade")
	proto.RegisterType((*GovMsgCancelPoolUpgradeResponse)(nil), "kyve.pool.v1beta1.GovMsgCancelPoolUpgradeResponse")
	proto.RegisterType((*GovMsgResetPool)(nil), "kyve.pool.v1beta1.GovMsgResetPool")
	proto.RegisterType((*GovMsgResetPoolResponse)(nil), "kyve.pool.v1beta1.GovMsgResetPoolResponse")
}

func init() { proto.RegisterFile("kyve/pool/v1beta1/gov.proto", fileDescriptor_adce52e9478669ec) }

var fileDescriptor_adce52e9478669ec = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xad, 0x53, 0x93, 0x26, 0xd3, 0x17, 0xf5, 0x02, 0xa6, 0x8d, 0x64, 0xda, 0x48, 0x40, 0xd9,
	0xc4, 0xaa, 0x58, 0x22, 0x16, 0x34, 0x42, 0xa8, 0xaa, 0x8a, 0x2a, 0x57, 0xad, 0x80, 0x8d, 0x35,
	0xb1, 0x2f, 0xce, 0x28, 0xf6, 0x8c, 0xe5, 0x19, 0x9b, 0xa4, 0x5f, 0xc1, 0x07, 0xf1, 0x01, 0x2c,
	0xbb, 0x64, 0x89, 0x92, 0x3d, 0xdf, 0x80, 0x66, 0xfc, 0x68, 0x12, 0x04, 0xa8, 0xb0, 0xf3, 0x39,
	0xf7, 0xfa, 0x1c, 0xdf, 0xb9, 0xc7, 0x83, 0x3a, 0xa3, 0x49, 0x0e, 0x4e, 0xc2, 0x79, 0xe4, 0xe4,
	0x47, 0x03, 0x90, 0xe4, 0xc8, 0x09, 0x79, 0xde, 0x4b, 0x52, 0x2e, 0xb9, 0xb5, 0xa3, 0x8a, 0x3d,
	0x55, 0xec, 0x95, 0xc5, 0xee, 0x8f, 0x06, 0xba, 0xff, 0x86, 0xe7, 0x67, 0x22, 0xec, 0xa7, 0x40,
	0x24, 0x9c, 0x73, 0x1e, 0x59, 0x18, 0xad, 0xf9, 0x0a, 0xf1, 0x14, 0x1b, 0xfb, 0xc6, 0x61, 0xdb,
	0xad, 0xa0, 0x65, 0x21, 0x93, 0x91, 0x18, 0xf0, 0xaa, 0xa6, 0xf5, 0xb3, 0xea, 0x4e, 0x33, 0x26,
	0x69, 0x0c, 0xd8, 0x2c, 0xba, 0x4b, 0xa8, 0xba, 0x23, 0x1e, 0x72, 0x7c, 0xaf, 0xe8, 0x56, 0xcf,
	0xd6, 0x03, 0xd4, 0xf4, 0x39, 0xfb, 0x48, 0x43, 0xdc, 0xd4, 0x6c, 0x89, 0xac, 0x0e, 0x6a, 0x0b,
	0x49, 0x52, 0xe9, 0x8d, 0x60, 0x82, 0xd7, 0x74, 0xa9, 0xa5, 0x89, 0x53, 0x98, 0x58, 0x4f, 0xd1,
	0x76, 0x96, 0x44, 0x9c, 0x04, 0x1e, 0x65, 0x12, 0xd2, 0x9c, 0x44, 0xb8, 0xb5, 0x6f, 0x1c, 0x9a,
	0xee, 0x56, 0x41, 0x9f, 0x94, 0xac, 0xf5, 0x18, 0x6d, 0xf1, 0x04, 0x52, 0x22, 0x29, 0x0b, 0x3d,
	0x9f, 0x0b, 0x89, 0xdb, 0xba, 0x6f, 0xb3, 0x66, 0xfb, 0x5c, 0x48, 0x65, 0x16, 0x53, 0xe6, 0x09,
	0x49, 0x46, 0x80, 0x91, 0xee, 0x68, 0xc5, 0x94, 0x5d, 0x28, 0x6c, 0x3d, 0x41, 0xdb, 0x31, 0x19,
	0x7b, 0x83, 0x8c, 0x05, 0x11, 0x78, 0x82, 0x5e, 0x03, 0x5e, 0x2f, 0x44, 0x62, 0x32, 0x3e, 0xd6,
	0xec, 0x05, 0xbd, 0xd6, 0x73, 0xe7, 0x90, 0x0a, 0xca, 0x19, 0xde, 0x28, 0xe6, 0x2e, 0xa1, 0xb5,
	0x87, 0x5a, 0x03, 0xca, 0x48, 0x4a, 0x41, 0xe0, 0xcd, 0x62, 0x94, 0x0a, 0x77, 0xf7, 0x10, 0x5e,
	0x3e, 0x6f, 0x17, 0x44, 0xc2, 0x99, 0x80, 0xee, 0x55, 0xb5, 0x8b, 0xcb, 0x24, 0xf8, 0xfb, 0x2e,
	0xb6, 0x50, 0x83, 0x06, 0xb8, 0xa1, 0x3f, 0xad, 0x41, 0x03, 0xd5, 0x99, 0x90, 0x89, 0x3a, 0x8e,
	0x72, 0x3d, 0x15, 0xbc, 0xf5, 0xbc, 0xd5, 0xad, 0x3d, 0x5f, 0xa0, 0xed, 0xa2, 0x76, 0x4e, 0x32,
	0x71, 0x47, 0xcb, 0xee, 0x2e, 0x7a, 0xb8, 0xf4, 0x72, 0xad, 0xfb, 0x12, 0xed, 0x94, 0x9e, 0x2c,
	0xf9, 0x07, 0xe5, 0x0e, 0xda, 0xfd, 0xe5, 0xf5, 0x5a, 0xfb, 0x8b, 0x51, 0x89, 0x2b, 0xfa, 0x32,
	0x09, 0x53, 0x12, 0xc0, 0x1f, 0xc4, 0xe7, 0x12, 0xda, 0x58, 0x4c, 0xe8, 0xdc, 0x0e, 0x57, 0x17,
	0x77, 0x78, 0x80, 0x36, 0x84, 0x3f, 0x84, 0x20, 0x8b, 0x20, 0xf0, 0x88, 0xd4, 0xd1, 0x36, 0xdd,
	0xf5, 0x9a, 0x7b, 0x25, 0xd5, 0x9a, 0x83, 0x4c, 0xa5, 0x8a, 0x33, 0x1d, 0x71, 0xd3, 0xad, 0xf1,
	0x42, 0x04, 0x9a, 0x4b, 0x11, 0xa8, 0x67, 0x9b, 0xfb, 0xfa, 0x7a, 0xb6, 0xb3, 0xea, 0x48, 0xfb,
	0x84, 0xf9, 0x10, 0xfd, 0xe7, 0x80, 0xdd, 0x03, 0xf4, 0xe8, 0x37, 0x72, 0xb5, 0xe3, 0xbb, 0x2a,
	0x01, 0x2e, 0x08, 0x90, 0x77, 0x0c, 0x5d, 0x07, 0xb5, 0xcb, 0x1f, 0x85, 0x16, 0xb1, 0x33, 0xdd,
	0x56, 0x41, 0x9c, 0xcc, 0xc5, 0xa3, 0x56, 0xae, 0x4c, 0x8f, 0xfb, 0x5f, 0xa7, 0xb6, 0x71, 0x33,
	0xb5, 0x8d, 0xef, 0x53, 0xdb, 0xf8, 0x3c, 0xb3, 0x57, 0x6e, 0x66, 0xf6, 0xca, 0xb7, 0x99, 0xbd,
	0xf2, 0xe1, 0x59, 0x48, 0xe5, 0x30, 0x1b, 0xf4, 0x7c, 0x1e, 0x3b, 0xa7, 0xef, 0xaf, 0x5e, 0xbf,
	0x05, 0xf9, 0x89, 0xa7, 0x23, 0xc7, 0x1f, 0x12, 0xca, 0x9c, 0x71, 0x71, 0xb7, 0xc9, 0x49, 0x02,
	0x62, 0xd0, 0xd4, 0xd7, 0xda, 0xf3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x09, 0xd4, 0x3e,
	0xf5, 0x04, 0x00, 0x00,
}

func (m *GovMsgCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		i -= len(m.Binaries)
		copy(dAtA[i:], m.Binaries)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Binaries)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x62
	}
	if m.MaxBundleSize != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.MaxBundleSize))
		i--
		dAtA[i] = 0x58
	}
	if m.MinStake != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x50
	}
	if m.OperatingCost != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.OperatingCost))
		i--
		dAtA[i] = 0x48
	}
	if m.UploadInterval != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.UploadInterval))
		i--
		dAtA[i] = 0x40
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintGov(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GovMsgUpdatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgUpdatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgUpdatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgUpdatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgUpdatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgUpdatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GovMsgPausePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgPausePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgPausePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgPausePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgPausePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgPausePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GovMsgUnpausePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgUnpausePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgUnpausePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgUnpausePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgUnpausePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgUnpausePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GovMsgPoolUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgPoolUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgPoolUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		i -= len(m.Binaries)
		copy(dAtA[i:], m.Binaries)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Binaries)))
		i--
		dAtA[i] = 0x32
	}
	if m.Duration != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.ScheduledAt != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.ScheduledAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgPoolUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgPoolUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgPoolUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GovMsgCancelPoolUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgCancelPoolUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgCancelPoolUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgCancelPoolUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgCancelPoolUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgCancelPoolUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GovMsgResetPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgResetPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgResetPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BundleId != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.BundleId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovMsgResetPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovMsgResetPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovMsgResetPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GovMsgCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.UploadInterval != 0 {
		n += 1 + sovGov(uint64(m.UploadInterval))
	}
	if m.OperatingCost != 0 {
		n += 1 + sovGov(uint64(m.OperatingCost))
	}
	if m.MinStake != 0 {
		n += 1 + sovGov(uint64(m.MinStake))
	}
	if m.MaxBundleSize != 0 {
		n += 1 + sovGov(uint64(m.MaxBundleSize))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Binaries)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *GovMsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GovMsgUpdatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGov(uint64(m.Id))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *GovMsgUpdatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GovMsgPausePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGov(uint64(m.Id))
	}
	return n
}

func (m *GovMsgPausePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GovMsgUnpausePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGov(uint64(m.Id))
	}
	return n
}

func (m *GovMsgUnpausePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GovMsgPoolUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.ScheduledAt != 0 {
		n += 1 + sovGov(uint64(m.ScheduledAt))
	}
	if m.Duration != 0 {
		n += 1 + sovGov(uint64(m.Duration))
	}
	l = len(m.Binaries)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *GovMsgPoolUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GovMsgCancelPoolUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *GovMsgCancelPoolUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GovMsgResetPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGov(uint64(m.Id))
	}
	if m.BundleId != 0 {
		n += 1 + sovGov(uint64(m.BundleId))
	}
	return n
}

func (m *GovMsgResetPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GovMsgCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
			}
			m.UploadInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
			}
			m.OperatingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatingCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBundleSize", wireType)
			}
			m.MaxBundleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBundleSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgUpdatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgUpdatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgUpdatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgUpdatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgUpdatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgUpdatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgPausePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgPausePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgPausePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgPausePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgPausePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgPausePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgUnpausePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgUnpausePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgUnpausePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgUnpausePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgUnpausePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgUnpausePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgPoolUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgPoolUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgPoolUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledAt", wireType)
			}
			m.ScheduledAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgPoolUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgPoolUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgPoolUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgCancelPoolUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgCancelPoolUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgCancelPoolUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgCancelPoolUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgCancelPoolUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgCancelPoolUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgResetPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgResetPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgResetPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			m.BundleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BundleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovMsgResetPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovMsgResetPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovMsgResetPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
