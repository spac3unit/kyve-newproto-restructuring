// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/pool/v1beta1/pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolStatus ...
type PoolStatus int32

const (
	// POOL_STATUS_UNSPECIFIED ...
	POOL_STATUS_UNSPECIFIED PoolStatus = 0
	// POOL_STATUS_ACTIVE ...
	POOL_STATUS_ACTIVE PoolStatus = 1
	// POOL_STATUS_PAUSED ...
	POOL_STATUS_PAUSED PoolStatus = 2
	// POOL_STATUS_NO_FUNDS ...
	POOL_STATUS_NO_FUNDS PoolStatus = 3
	// POOL_STATUS_NOT_ENOUGH_VALIDATORS ...
	POOL_STATUS_NOT_ENOUGH_VALIDATORS PoolStatus = 4
	// POOL_STATUS_NOT_ENOUGH_STAKE ...
	POOL_STATUS_NOT_ENOUGH_STAKE PoolStatus = 5
	// POOL_STATUS_UPGRADING ...
	POOL_STATUS_UPGRADING PoolStatus = 6
)

var PoolStatus_name = map[int32]string{
	0: "POOL_STATUS_UNSPECIFIED",
	1: "POOL_STATUS_ACTIVE",
	2: "POOL_STATUS_PAUSED",
	3: "POOL_STATUS_NO_FUNDS",
	4: "POOL_STATUS_NOT_ENOUGH_VALIDATORS",
	5: "POOL_STATUS_NOT_ENOUGH_STAKE",
	6: "POOL_STATUS_UPGRADING",
}

var PoolStatus_value = map[string]int32{
	"POOL_STATUS_UNSPECIFIED":           0,
	"POOL_STATUS_ACTIVE":                1,
	"POOL_STATUS_PAUSED":                2,
	"POOL_STATUS_NO_FUNDS":              3,
	"POOL_STATUS_NOT_ENOUGH_VALIDATORS": 4,
	"POOL_STATUS_NOT_ENOUGH_STAKE":      5,
	"POOL_STATUS_UPGRADING":             6,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{0}
}

// Protocol ...
type Protocol struct {
	// version ...
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// binaries ...
	Binaries string `protobuf:"bytes,2,opt,name=binaries,proto3" json:"binaries,omitempty"`
	// last_upgrade ...
	LastUpgrade uint64 `protobuf:"varint,3,opt,name=last_upgrade,json=lastUpgrade,proto3" json:"last_upgrade,omitempty"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{0}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

func (m *Protocol) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Protocol) GetBinaries() string {
	if m != nil {
		return m.Binaries
	}
	return ""
}

func (m *Protocol) GetLastUpgrade() uint64 {
	if m != nil {
		return m.LastUpgrade
	}
	return 0
}

// Upgrade ...
type UpgradePlan struct {
	// version ...
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// binaries ...
	Binaries string `protobuf:"bytes,2,opt,name=binaries,proto3" json:"binaries,omitempty"`
	// scheduled_at ...
	ScheduledAt uint64 `protobuf:"varint,3,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// duration ...
	Duration uint64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *UpgradePlan) Reset()         { *m = UpgradePlan{} }
func (m *UpgradePlan) String() string { return proto.CompactTextString(m) }
func (*UpgradePlan) ProtoMessage()    {}
func (*UpgradePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{1}
}
func (m *UpgradePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradePlan.Merge(m, src)
}
func (m *UpgradePlan) XXX_Size() int {
	return m.Size()
}
func (m *UpgradePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradePlan.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradePlan proto.InternalMessageInfo

func (m *UpgradePlan) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UpgradePlan) GetBinaries() string {
	if m != nil {
		return m.Binaries
	}
	return ""
}

func (m *UpgradePlan) GetScheduledAt() uint64 {
	if m != nil {
		return m.ScheduledAt
	}
	return 0
}

func (m *UpgradePlan) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Funder ...
type Funder struct {
	// address ...
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Funder) Reset()         { *m = Funder{} }
func (m *Funder) String() string { return proto.CompactTextString(m) }
func (*Funder) ProtoMessage()    {}
func (*Funder) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{2}
}
func (m *Funder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funder.Merge(m, src)
}
func (m *Funder) XXX_Size() int {
	return m.Size()
}
func (m *Funder) XXX_DiscardUnknown() {
	xxx_messageInfo_Funder.DiscardUnknown(m)
}

var xxx_messageInfo_Funder proto.InternalMessageInfo

func (m *Funder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Funder) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// Pool ...
type Pool struct {
	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name ...
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// config ...
	Config string `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// start_key ...
	StartKey string `protobuf:"bytes,6,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// current_key ...
	CurrentKey string `protobuf:"bytes,7,opt,name=current_key,json=currentKey,proto3" json:"current_key,omitempty"`
	// current_value ...
	CurrentValue string `protobuf:"bytes,8,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	// current_height ...
	CurrentHeight uint64 `protobuf:"varint,9,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	// total_bytes ...
	TotalBytes uint64 `protobuf:"varint,10,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// total_bundles ...
	TotalBundles uint64 `protobuf:"varint,11,opt,name=total_bundles,json=totalBundles,proto3" json:"total_bundles,omitempty"`
	// total_bundle_rewards ...
	TotalBundleRewards uint64 `protobuf:"varint,12,opt,name=total_bundle_rewards,json=totalBundleRewards,proto3" json:"total_bundle_rewards,omitempty"`
	// upload_interval ...
	UploadInterval uint64 `protobuf:"varint,13,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// operating_cost ...
	OperatingCost uint64 `protobuf:"varint,14,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// min_stake ...
	MinStake uint64 `protobuf:"varint,15,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	// max_bundle_size ...
	MaxBundleSize uint64 `protobuf:"varint,16,opt,name=max_bundle_size,json=maxBundleSize,proto3" json:"max_bundle_size,omitempty"`
	// paused ...
	Paused bool `protobuf:"varint,17,opt,name=paused,proto3" json:"paused,omitempty"`
	// funders ...
	Funders []*Funder `protobuf:"bytes,18,rep,name=funders,proto3" json:"funders,omitempty"`
	// total_funds ...
	TotalFunds uint64 `protobuf:"varint,19,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// protocol ...
	Protocol *Protocol `protobuf:"bytes,20,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// upgrade_plan ...
	UpgradePlan *UpgradePlan `protobuf:"bytes,21,opt,name=upgrade_plan,json=upgradePlan,proto3" json:"upgrade_plan,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{3}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *Pool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Pool) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Pool) GetStartKey() string {
	if m != nil {
		return m.StartKey
	}
	return ""
}

func (m *Pool) GetCurrentKey() string {
	if m != nil {
		return m.CurrentKey
	}
	return ""
}

func (m *Pool) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func (m *Pool) GetCurrentHeight() uint64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *Pool) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *Pool) GetTotalBundles() uint64 {
	if m != nil {
		return m.TotalBundles
	}
	return 0
}

func (m *Pool) GetTotalBundleRewards() uint64 {
	if m != nil {
		return m.TotalBundleRewards
	}
	return 0
}

func (m *Pool) GetUploadInterval() uint64 {
	if m != nil {
		return m.UploadInterval
	}
	return 0
}

func (m *Pool) GetOperatingCost() uint64 {
	if m != nil {
		return m.OperatingCost
	}
	return 0
}

func (m *Pool) GetMinStake() uint64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *Pool) GetMaxBundleSize() uint64 {
	if m != nil {
		return m.MaxBundleSize
	}
	return 0
}

func (m *Pool) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Pool) GetFunders() []*Funder {
	if m != nil {
		return m.Funders
	}
	return nil
}

func (m *Pool) GetTotalFunds() uint64 {
	if m != nil {
		return m.TotalFunds
	}
	return 0
}

func (m *Pool) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Pool) GetUpgradePlan() *UpgradePlan {
	if m != nil {
		return m.UpgradePlan
	}
	return nil
}

func init() {
	proto.RegisterEnum("kyve.pool.v1beta1.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterType((*Protocol)(nil), "kyve.pool.v1beta1.Protocol")
	proto.RegisterType((*UpgradePlan)(nil), "kyve.pool.v1beta1.UpgradePlan")
	proto.RegisterType((*Funder)(nil), "kyve.pool.v1beta1.Funder")
	proto.RegisterType((*Pool)(nil), "kyve.pool.v1beta1.Pool")
}

func init() { proto.RegisterFile("kyve/pool/v1beta1/pool.proto", fileDescriptor_40c1730f47ff2ef8) }

var fileDescriptor_40c1730f47ff2ef8 = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0xb7, 0x12, 0xc7, 0xb1, 0x9f, 0xdd, 0xc4, 0xe5, 0xd2, 0x8e, 0x4d, 0x0a, 0xcf, 0xcd, 0xd0,
	0xcd, 0xdb, 0xc1, 0x5e, 0xdb, 0xc3, 0x80, 0xdd, 0xd4, 0xd8, 0x49, 0x8d, 0x14, 0xb6, 0x21, 0xd9,
	0x01, 0xb6, 0x8b, 0x40, 0x4b, 0xac, 0x2c, 0x58, 0x22, 0x05, 0x91, 0x72, 0xe3, 0x1e, 0x77, 0xda,
	0x71, 0xdf, 0x61, 0x5f, 0x66, 0xc7, 0x1e, 0x77, 0x19, 0x30, 0x24, 0x9f, 0x60, 0xdf, 0x60, 0x20,
	0x25, 0xb9, 0xee, 0x96, 0x5d, 0x7a, 0x7b, 0xbf, 0x3f, 0x7c, 0xef, 0xf1, 0x89, 0x4f, 0xf0, 0x78,
	0xb9, 0x5e, 0xd1, 0x5e, 0xcc, 0x79, 0xd8, 0x5b, 0x3d, 0x9b, 0x53, 0x49, 0x9e, 0x69, 0xd0, 0x8d,
	0x13, 0x2e, 0x39, 0xba, 0xaf, 0xd4, 0xae, 0x26, 0x72, 0xf5, 0xf8, 0xc8, 0xe7, 0x3e, 0xd7, 0x6a,
	0x4f, 0x45, 0x99, 0xf1, 0xd4, 0x85, 0xea, 0x44, 0x05, 0x2e, 0x0f, 0x11, 0x86, 0xfd, 0x15, 0x4d,
	0x44, 0xc0, 0x19, 0x36, 0xda, 0x46, 0xa7, 0x66, 0x15, 0x10, 0x1d, 0x43, 0x75, 0x1e, 0x30, 0x92,
	0x04, 0x54, 0xe0, 0x1d, 0x2d, 0x6d, 0x30, 0x7a, 0x02, 0x8d, 0x90, 0x08, 0xe9, 0xa4, 0xb1, 0x9f,
	0x10, 0x8f, 0xe2, 0xdd, 0xb6, 0xd1, 0x29, 0x5b, 0x75, 0xc5, 0xcd, 0x32, 0xea, 0xf4, 0x67, 0x03,
	0xea, 0x79, 0x3c, 0x09, 0x09, 0xfb, 0xf4, 0x42, 0xc2, 0x5d, 0x50, 0x2f, 0x0d, 0xa9, 0xe7, 0x10,
	0x59, 0x14, 0xda, 0x70, 0xa6, 0x54, 0xc7, 0xbd, 0x34, 0x21, 0x52, 0x65, 0x2e, 0x6b, 0x79, 0x83,
	0x4f, 0x7f, 0x80, 0xca, 0x79, 0xca, 0x3c, 0x9a, 0xa8, 0xf2, 0xc4, 0xf3, 0x12, 0x2a, 0x8a, 0x1a,
	0x05, 0x44, 0x0f, 0xa1, 0x42, 0x22, 0x9e, 0xb2, 0x22, 0x79, 0x8e, 0x4e, 0xff, 0xde, 0x83, 0xf2,
	0x84, 0xf3, 0x10, 0x1d, 0xc0, 0x4e, 0xe0, 0xe9, 0xa6, 0xcb, 0xd6, 0x4e, 0xe0, 0x21, 0x04, 0x65,
	0x46, 0x22, 0x9a, 0xe7, 0xd1, 0xb1, 0x4a, 0x9f, 0xa4, 0x4c, 0x06, 0x51, 0x36, 0x8b, 0x9a, 0x55,
	0x40, 0xe5, 0x0e, 0xb9, 0xcf, 0x75, 0x6b, 0x35, 0x4b, 0xc7, 0xaa, 0xa4, 0xcb, 0xd9, 0x9b, 0xc0,
	0xc7, 0x7b, 0x9a, 0xcd, 0x11, 0x3a, 0x81, 0x9a, 0x90, 0x24, 0x91, 0xce, 0x92, 0xae, 0x71, 0x25,
	0x1b, 0x85, 0x26, 0x2e, 0xe9, 0x1a, 0x7d, 0x01, 0x75, 0x37, 0x4d, 0x12, 0xca, 0x32, 0x79, 0x5f,
	0xcb, 0x90, 0x53, 0xca, 0xf0, 0x25, 0xdc, 0x2b, 0x0c, 0x2b, 0x12, 0xa6, 0x14, 0x57, 0xb5, 0xa5,
	0x91, 0x93, 0x57, 0x8a, 0x43, 0x4f, 0xe1, 0xa0, 0x30, 0x2d, 0x68, 0xe0, 0x2f, 0x24, 0xae, 0xe9,
	0x8b, 0x15, 0x47, 0x5f, 0x69, 0x52, 0x15, 0x93, 0x5c, 0x92, 0xd0, 0x99, 0xaf, 0x25, 0x15, 0x18,
	0xb4, 0x07, 0x34, 0xf5, 0x52, 0x31, 0xaa, 0x58, 0x6e, 0x48, 0x99, 0x17, 0x52, 0x81, 0xeb, 0xda,
	0xd2, 0xc8, 0x2c, 0x19, 0x87, 0xbe, 0x83, 0xa3, 0x6d, 0x93, 0x93, 0xd0, 0xb7, 0x24, 0xf1, 0x04,
	0x6e, 0x68, 0x2f, 0xda, 0xf2, 0x5a, 0x99, 0x82, 0xbe, 0x86, 0xc3, 0x34, 0x0e, 0x39, 0xf1, 0x9c,
	0x80, 0x49, 0x9a, 0xac, 0x48, 0x88, 0xef, 0x69, 0xf3, 0x41, 0x46, 0x0f, 0x73, 0x56, 0xdd, 0x83,
	0xc7, 0x54, 0x7d, 0x66, 0xe6, 0x3b, 0x2e, 0x17, 0x12, 0x1f, 0x64, 0xf7, 0xd8, 0xb0, 0x67, 0x5c,
	0x48, 0x35, 0xd1, 0x28, 0x60, 0x8e, 0x90, 0x64, 0x49, 0xf1, 0x61, 0xf6, 0x3a, 0xa2, 0x80, 0xd9,
	0x0a, 0xa3, 0xaf, 0xe0, 0x30, 0x22, 0xd7, 0x45, 0x73, 0x22, 0x78, 0x47, 0x71, 0x33, 0x4b, 0x12,
	0x91, 0xeb, 0xac, 0x2f, 0x3b, 0x78, 0x47, 0xd5, 0xe7, 0x8a, 0x49, 0x2a, 0xa8, 0x87, 0xef, 0xb7,
	0x8d, 0x4e, 0xd5, 0xca, 0x11, 0x7a, 0x01, 0xfb, 0x6f, 0xf4, 0xeb, 0x12, 0x18, 0xb5, 0x77, 0x3b,
	0xf5, 0xe7, 0x8f, 0xba, 0xff, 0x59, 0xc1, 0x6e, 0xf6, 0xfe, 0xac, 0xc2, 0xf9, 0x61, 0xb2, 0x8a,
	0x10, 0xf8, 0xb3, 0xad, 0xc9, 0x2a, 0xab, 0x40, 0xdf, 0x43, 0x35, 0xce, 0xb7, 0x13, 0x1f, 0xb5,
	0x8d, 0x4e, 0xfd, 0xf9, 0xc9, 0x1d, 0x69, 0x8b, 0x05, 0xb6, 0x36, 0x66, 0x64, 0x42, 0x23, 0xdf,
	0x47, 0x27, 0x0e, 0x09, 0xc3, 0x0f, 0xf4, 0xe1, 0xd6, 0x1d, 0x87, 0xb7, 0xf6, 0xd2, 0xaa, 0xa7,
	0x1f, 0xc0, 0xb7, 0x7f, 0x1a, 0x00, 0xea, 0xcd, 0xdb, 0x92, 0xc8, 0x54, 0xa0, 0x13, 0xf8, 0x7c,
	0x32, 0x1e, 0xbf, 0x76, 0xec, 0xa9, 0x39, 0x9d, 0xd9, 0xce, 0x6c, 0x64, 0x4f, 0x06, 0x67, 0xc3,
	0xf3, 0xe1, 0xa0, 0xdf, 0x2c, 0xa1, 0x87, 0x80, 0xb6, 0x45, 0xf3, 0x6c, 0x3a, 0xbc, 0x1a, 0x34,
	0x8d, 0x7f, 0xf3, 0x13, 0x73, 0x66, 0x0f, 0xfa, 0xcd, 0x1d, 0x84, 0xe1, 0x68, 0x9b, 0x1f, 0x8d,
	0x9d, 0xf3, 0xd9, 0xa8, 0x6f, 0x37, 0x77, 0xd1, 0x53, 0x78, 0xf2, 0xb1, 0x32, 0x75, 0x06, 0xa3,
	0xf1, 0xec, 0xe2, 0x95, 0x73, 0x65, 0xbe, 0x1e, 0xf6, 0xcd, 0xe9, 0xd8, 0xb2, 0x9b, 0x65, 0xd4,
	0x86, 0xc7, 0xff, 0x63, 0xb3, 0xa7, 0xe6, 0xe5, 0xa0, 0xb9, 0x87, 0x1e, 0xc1, 0x83, 0x8f, 0xfa,
	0x9d, 0x5c, 0x58, 0x66, 0x7f, 0x38, 0xba, 0x68, 0x56, 0x8e, 0xcb, 0xbf, 0xfc, 0xd6, 0x2a, 0xbd,
	0x3c, 0xfb, 0xfd, 0xa6, 0x65, 0xbc, 0xbf, 0x69, 0x19, 0x7f, 0xdd, 0xb4, 0x8c, 0x5f, 0x6f, 0x5b,
	0xa5, 0xf7, 0xb7, 0xad, 0xd2, 0x1f, 0xb7, 0xad, 0xd2, 0x4f, 0xdf, 0xf8, 0x81, 0x5c, 0xa4, 0xf3,
	0xae, 0xcb, 0xa3, 0xde, 0xe5, 0x8f, 0x57, 0x83, 0x11, 0x95, 0x6f, 0x79, 0xb2, 0xec, 0xb9, 0x0b,
	0x12, 0xb0, 0xde, 0x75, 0xf6, 0xd3, 0x95, 0xeb, 0x98, 0x8a, 0x79, 0x45, 0x4f, 0xfc, 0xc5, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x88, 0x28, 0x2c, 0x8e, 0x05, 0x00, 0x00,
}

func (m *Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpgrade != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastUpgrade))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Binaries) > 0 {
		i -= len(m.Binaries)
		copy(dAtA[i:], m.Binaries)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Binaries)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.ScheduledAt != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.ScheduledAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Binaries) > 0 {
		i -= len(m.Binaries)
		copy(dAtA[i:], m.Binaries)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Binaries)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Funder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpgradePlan != nil {
		{
			size, err := m.UpgradePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TotalFunds != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TotalFunds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Funders) > 0 {
		for iNdEx := len(m.Funders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.MaxBundleSize != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.MaxBundleSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.MinStake != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x78
	}
	if m.OperatingCost != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.OperatingCost))
		i--
		dAtA[i] = 0x70
	}
	if m.UploadInterval != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.UploadInterval))
		i--
		dAtA[i] = 0x68
	}
	if m.TotalBundleRewards != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TotalBundleRewards))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalBundles != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TotalBundles))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalBytes != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TotalBytes))
		i--
		dAtA[i] = 0x50
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintPool(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CurrentKey) > 0 {
		i -= len(m.CurrentKey)
		copy(dAtA[i:], m.CurrentKey)
		i = encodeVarintPool(dAtA, i, uint64(len(m.CurrentKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintPool(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Binaries)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.LastUpgrade != 0 {
		n += 1 + sovPool(uint64(m.LastUpgrade))
	}
	return n
}

func (m *UpgradePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Binaries)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.ScheduledAt != 0 {
		n += 1 + sovPool(uint64(m.ScheduledAt))
	}
	if m.Duration != 0 {
		n += 1 + sovPool(uint64(m.Duration))
	}
	return n
}

func (m *Funder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPool(uint64(m.Amount))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPool(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.CurrentKey)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.CurrentHeight != 0 {
		n += 1 + sovPool(uint64(m.CurrentHeight))
	}
	if m.TotalBytes != 0 {
		n += 1 + sovPool(uint64(m.TotalBytes))
	}
	if m.TotalBundles != 0 {
		n += 1 + sovPool(uint64(m.TotalBundles))
	}
	if m.TotalBundleRewards != 0 {
		n += 1 + sovPool(uint64(m.TotalBundleRewards))
	}
	if m.UploadInterval != 0 {
		n += 1 + sovPool(uint64(m.UploadInterval))
	}
	if m.OperatingCost != 0 {
		n += 1 + sovPool(uint64(m.OperatingCost))
	}
	if m.MinStake != 0 {
		n += 1 + sovPool(uint64(m.MinStake))
	}
	if m.MaxBundleSize != 0 {
		n += 2 + sovPool(uint64(m.MaxBundleSize))
	}
	if m.Paused {
		n += 3
	}
	if len(m.Funders) > 0 {
		for _, e := range m.Funders {
			l = e.Size()
			n += 2 + l + sovPool(uint64(l))
		}
	}
	if m.TotalFunds != 0 {
		n += 2 + sovPool(uint64(m.TotalFunds))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 2 + l + sovPool(uint64(l))
	}
	if m.UpgradePlan != nil {
		l = m.UpgradePlan.Size()
		n += 2 + l + sovPool(uint64(l))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpgrade", wireType)
			}
			m.LastUpgrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpgrade |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledAt", wireType)
			}
			m.ScheduledAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBundles", wireType)
			}
			m.TotalBundles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBundles |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBundleRewards", wireType)
			}
			m.TotalBundleRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBundleRewards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
			}
			m.UploadInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
			}
			m.OperatingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatingCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBundleSize", wireType)
			}
			m.MaxBundleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBundleSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funders = append(m.Funders, &Funder{})
			if err := m.Funders[len(m.Funders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
			}
			m.TotalFunds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFunds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradePlan == nil {
				m.UpgradePlan = &UpgradePlan{}
			}
			if err := m.UpgradePlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
