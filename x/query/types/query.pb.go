// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/query/v1beta1/query.proto

package types

import (
	fmt "fmt"
	types "github.com/KYVENetwork/chain/x/pool/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BasicPool contains the necessary properties need for a pool
// to be displayed in the UI
type BasicPool struct {
	// id ...
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name ...
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime ...
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// total_funds ...
	TotalFunds uint64 `protobuf:"varint,5,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// status ...
	Status types.PoolStatus `protobuf:"varint,6,opt,name=status,proto3,enum=kyve.pool.v1beta1.PoolStatus" json:"status,omitempty"`
}

func (m *BasicPool) Reset()         { *m = BasicPool{} }
func (m *BasicPool) String() string { return proto.CompactTextString(m) }
func (*BasicPool) ProtoMessage()    {}
func (*BasicPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{0}
}
func (m *BasicPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicPool.Merge(m, src)
}
func (m *BasicPool) XXX_Size() int {
	return m.Size()
}
func (m *BasicPool) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicPool.DiscardUnknown(m)
}

var xxx_messageInfo_BasicPool proto.InternalMessageInfo

func (m *BasicPool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BasicPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BasicPool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *BasicPool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *BasicPool) GetTotalFunds() uint64 {
	if m != nil {
		return m.TotalFunds
	}
	return 0
}

func (m *BasicPool) GetStatus() types.PoolStatus {
	if m != nil {
		return m.Status
	}
	return types.POOL_STATUS_UNSPECIFIED
}

type FullStaker struct {
	Address  string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Metadata *StakerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// unbonding_amount ...
	UnbondingAmount uint64 `protobuf:"varint,4,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,8,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// delegator_count ...
	DelegatorCount uint64            `protobuf:"varint,5,opt,name=delegator_count,json=delegatorCount,proto3" json:"delegator_count,omitempty"`
	Pools          []*PoolMembership `protobuf:"bytes,6,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *FullStaker) Reset()         { *m = FullStaker{} }
func (m *FullStaker) String() string { return proto.CompactTextString(m) }
func (*FullStaker) ProtoMessage()    {}
func (*FullStaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{1}
}
func (m *FullStaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullStaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullStaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullStaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullStaker.Merge(m, src)
}
func (m *FullStaker) XXX_Size() int {
	return m.Size()
}
func (m *FullStaker) XXX_DiscardUnknown() {
	xxx_messageInfo_FullStaker.DiscardUnknown(m)
}

var xxx_messageInfo_FullStaker proto.InternalMessageInfo

func (m *FullStaker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FullStaker) GetMetadata() *StakerMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FullStaker) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FullStaker) GetUnbondingAmount() uint64 {
	if m != nil {
		return m.UnbondingAmount
	}
	return 0
}

func (m *FullStaker) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *FullStaker) GetDelegatorCount() uint64 {
	if m != nil {
		return m.DelegatorCount
	}
	return 0
}

func (m *FullStaker) GetPools() []*PoolMembership {
	if m != nil {
		return m.Pools
	}
	return nil
}

// BasicStaker contains the necessary properties need for a staker
// to be displayed in the UI
type StakerMetadata struct {
	// commission ...
	Commission string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,5,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website ...
	Website string `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	// pending_commission_change ...
	PendingCommissionChange *CommissionChangeEntry `protobuf:"bytes,9,opt,name=pending_commission_change,json=pendingCommissionChange,proto3" json:"pending_commission_change,omitempty"`
}

func (m *StakerMetadata) Reset()         { *m = StakerMetadata{} }
func (m *StakerMetadata) String() string { return proto.CompactTextString(m) }
func (*StakerMetadata) ProtoMessage()    {}
func (*StakerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{2}
}
func (m *StakerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerMetadata.Merge(m, src)
}
func (m *StakerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *StakerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StakerMetadata proto.InternalMessageInfo

func (m *StakerMetadata) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *StakerMetadata) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *StakerMetadata) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *StakerMetadata) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *StakerMetadata) GetPendingCommissionChange() *CommissionChangeEntry {
	if m != nil {
		return m.PendingCommissionChange
	}
	return nil
}

type CommissionChangeEntry struct {
	// commission ...
	Commission string `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
	// creation_date ...
	CreationDate int64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *CommissionChangeEntry) Reset()         { *m = CommissionChangeEntry{} }
func (m *CommissionChangeEntry) String() string { return proto.CompactTextString(m) }
func (*CommissionChangeEntry) ProtoMessage()    {}
func (*CommissionChangeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{3}
}
func (m *CommissionChangeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionChangeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionChangeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionChangeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionChangeEntry.Merge(m, src)
}
func (m *CommissionChangeEntry) XXX_Size() int {
	return m.Size()
}
func (m *CommissionChangeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionChangeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionChangeEntry proto.InternalMessageInfo

func (m *CommissionChangeEntry) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *CommissionChangeEntry) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

type PoolMembership struct {
	Pool       *BasicPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Points     uint64     `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	IsLeaving  bool       `protobuf:"varint,3,opt,name=isLeaving,proto3" json:"isLeaving,omitempty"`
	Valaddress string     `protobuf:"bytes,4,opt,name=valaddress,proto3" json:"valaddress,omitempty"`
}

func (m *PoolMembership) Reset()         { *m = PoolMembership{} }
func (m *PoolMembership) String() string { return proto.CompactTextString(m) }
func (*PoolMembership) ProtoMessage()    {}
func (*PoolMembership) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{4}
}
func (m *PoolMembership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMembership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMembership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMembership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMembership.Merge(m, src)
}
func (m *PoolMembership) XXX_Size() int {
	return m.Size()
}
func (m *PoolMembership) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMembership.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMembership proto.InternalMessageInfo

func (m *PoolMembership) GetPool() *BasicPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *PoolMembership) GetPoints() uint64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *PoolMembership) GetIsLeaving() bool {
	if m != nil {
		return m.IsLeaving
	}
	return false
}

func (m *PoolMembership) GetValaddress() string {
	if m != nil {
		return m.Valaddress
	}
	return ""
}

func init() {
	proto.RegisterType((*BasicPool)(nil), "kyve.query.v1beta1.BasicPool")
	proto.RegisterType((*FullStaker)(nil), "kyve.query.v1beta1.FullStaker")
	proto.RegisterType((*StakerMetadata)(nil), "kyve.query.v1beta1.StakerMetadata")
	proto.RegisterType((*CommissionChangeEntry)(nil), "kyve.query.v1beta1.CommissionChangeEntry")
	proto.RegisterType((*PoolMembership)(nil), "kyve.query.v1beta1.PoolMembership")
}

func init() { proto.RegisterFile("kyve/query/v1beta1/query.proto", fileDescriptor_6b41255feae93a15) }

var fileDescriptor_6b41255feae93a15 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x53, 0x37, 0xad, 0xa7, 0x90, 0xa2, 0x95, 0x00, 0x83, 0x8a, 0xa9, 0xc2, 0x81, 0x96,
	0x83, 0xa3, 0x16, 0x21, 0x71, 0x42, 0xa2, 0x7f, 0x17, 0x28, 0x42, 0x8b, 0x84, 0x04, 0x42, 0x8a,
	0x36, 0xf6, 0x92, 0xac, 0x62, 0xef, 0x06, 0xef, 0x3a, 0x25, 0x6f, 0xc1, 0x95, 0x07, 0x41, 0xbc,
	0x02, 0xc7, 0x1e, 0xb9, 0x81, 0xda, 0x17, 0x41, 0x3b, 0x6b, 0xbb, 0x4d, 0x5b, 0x6e, 0x9e, 0x6f,
	0xbe, 0x99, 0xcc, 0xf7, 0xcd, 0x64, 0x21, 0x1a, 0xcf, 0xa6, 0xbc, 0xf7, 0xa5, 0xe4, 0xc5, 0xac,
	0x37, 0xdd, 0x1e, 0x70, 0xc3, 0xb6, 0x5d, 0x14, 0x4f, 0x0a, 0x65, 0x14, 0x21, 0x36, 0x1f, 0x3b,
	0xa4, 0xca, 0xdf, 0x5f, 0xc7, 0x9a, 0x89, 0x52, 0x59, 0x53, 0x62, 0x03, 0x57, 0xd1, 0xfd, 0xe1,
	0x41, 0xb0, 0xcb, 0xb4, 0x48, 0xde, 0x2a, 0x95, 0x91, 0x0e, 0xb4, 0x44, 0x1a, 0x7a, 0x1b, 0xde,
	0xa6, 0x4f, 0x5b, 0x22, 0x25, 0x04, 0x7c, 0xc9, 0x72, 0x1e, 0xb6, 0x36, 0xbc, 0xcd, 0x80, 0xe2,
	0x37, 0x09, 0x61, 0xb9, 0x28, 0xa5, 0x11, 0x39, 0x0f, 0x17, 0x11, 0xae, 0x43, 0xcb, 0xce, 0xd4,
	0x50, 0x85, 0xbe, 0x63, 0xdb, 0x6f, 0xf2, 0x10, 0x56, 0x8d, 0x32, 0x2c, 0xeb, 0x7f, 0x2e, 0x65,
	0xaa, 0xc3, 0x25, 0x6c, 0x0d, 0x08, 0x1d, 0x5a, 0x84, 0x3c, 0x83, 0xb6, 0x36, 0xcc, 0x94, 0x3a,
	0x6c, 0x6f, 0x78, 0x9b, 0x9d, 0x9d, 0x07, 0x31, 0x6a, 0xc0, 0x11, 0xab, 0x79, 0x63, 0x3b, 0xdb,
	0x3b, 0x24, 0xd1, 0x8a, 0xdc, 0xfd, 0xd9, 0x02, 0x38, 0x2c, 0x33, 0x0b, 0x8f, 0x79, 0x61, 0x87,
	0x62, 0x69, 0x5a, 0x70, 0xad, 0x71, 0xfa, 0x80, 0xd6, 0x21, 0x79, 0x01, 0x2b, 0x39, 0x37, 0x2c,
	0x65, 0x86, 0xa1, 0x8c, 0xd5, 0x9d, 0x6e, 0x7c, 0xd5, 0xa5, 0xd8, 0xf5, 0x39, 0xaa, 0x98, 0xb4,
	0xa9, 0x21, 0x77, 0xa0, 0xcd, 0x72, 0x55, 0x4a, 0x83, 0x6a, 0x7d, 0x5a, 0x45, 0x64, 0x0b, 0x6e,
	0x95, 0x72, 0xa0, 0x64, 0x2a, 0xe4, 0xb0, 0x5f, 0x31, 0x7c, 0x64, 0xac, 0x35, 0xf8, 0xcb, 0x86,
	0xea, 0x3c, 0x48, 0x79, 0xc6, 0x87, 0xcc, 0x08, 0x25, 0xc3, 0x15, 0x47, 0x45, 0x7c, 0xbf, 0x81,
	0xc9, 0x63, 0x58, 0xab, 0x48, 0xaa, 0xe8, 0x27, 0xd8, 0xd4, 0x59, 0xd6, 0x69, 0xe0, 0x3d, 0xec,
	0xf9, 0x1c, 0x96, 0xac, 0x45, 0xd6, 0xb5, 0xc5, 0xff, 0x69, 0xb2, 0xb6, 0x1d, 0xf1, 0x7c, 0xc0,
	0x0b, 0x3d, 0x12, 0x13, 0xea, 0x0a, 0xba, 0x7f, 0x3c, 0xe8, 0xcc, 0xab, 0x25, 0x11, 0x40, 0xa2,
	0xf2, 0x5c, 0x68, 0x6d, 0x47, 0x73, 0xeb, 0xbb, 0x80, 0x58, 0x77, 0x73, 0x25, 0xc5, 0x98, 0x17,
	0x38, 0x4d, 0x40, 0xeb, 0xd0, 0x66, 0x8e, 0xf9, 0x40, 0x0b, 0xc3, 0x71, 0x7d, 0x01, 0xad, 0xc3,
	0xe6, 0x18, 0x96, 0x2f, 0x1c, 0x03, 0x87, 0x7b, 0x13, 0xee, 0x1c, 0x3b, 0xef, 0xde, 0x4f, 0x46,
	0x4c, 0x0e, 0x79, 0x18, 0xe0, 0x72, 0xb6, 0xae, 0x13, 0xb2, 0xd7, 0x90, 0xf7, 0x90, 0x7b, 0x20,
	0x4d, 0x31, 0xa3, 0x77, 0xab, 0x5e, 0x97, 0xb3, 0xdd, 0x4f, 0x70, 0xfb, 0xda, 0x8a, 0x4b, 0x3a,
	0xbd, 0x2b, 0x3a, 0x1f, 0xc1, 0xcd, 0xa4, 0xe0, 0xb8, 0x89, 0x7e, 0xca, 0x8c, 0xbb, 0xfb, 0x45,
	0x7a, 0xa3, 0x06, 0xf7, 0x99, 0xe1, 0xdd, 0xef, 0x1e, 0x74, 0xe6, 0x9d, 0x25, 0xdb, 0xe0, 0x5b,
	0x6f, 0xb1, 0xe3, 0x6a, 0x7d, 0xc1, 0xf3, 0x12, 0x9a, 0xff, 0x18, 0x45, 0xaa, 0x3d, 0xab, 0x89,
	0x12, 0xd2, 0x68, 0xfc, 0x0d, 0x9f, 0x56, 0x11, 0x59, 0x87, 0x40, 0xe8, 0xd7, 0x9c, 0x4d, 0x85,
	0x1c, 0xe2, 0xc5, 0xad, 0xd0, 0x73, 0xc0, 0x0a, 0x98, 0xb2, 0xac, 0xbe, 0xf4, 0x6a, 0x51, 0xe7,
	0xc8, 0xee, 0xfe, 0xaf, 0xd3, 0xc8, 0x3b, 0x39, 0x8d, 0xbc, 0xbf, 0xa7, 0x91, 0xf7, 0xed, 0x2c,
	0x5a, 0x38, 0x39, 0x8b, 0x16, 0x7e, 0x9f, 0x45, 0x0b, 0x1f, 0x9f, 0x0c, 0x85, 0x19, 0x95, 0x83,
	0x38, 0x51, 0x79, 0xef, 0xd5, 0x87, 0xf7, 0x07, 0x6f, 0xb8, 0x39, 0x56, 0xc5, 0xb8, 0x97, 0x8c,
	0x98, 0x90, 0xbd, 0xaf, 0xd5, 0x9b, 0x62, 0x66, 0x13, 0xae, 0x07, 0x6d, 0x7c, 0x1a, 0x9e, 0xfe,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xff, 0x61, 0x6f, 0x9c, 0x6e, 0x04, 0x00, 0x00,
}

func (m *BasicPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalFunds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalFunds))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FullStaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullStaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullStaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDelegation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DelegatorCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DelegatorCount))
		i--
		dAtA[i] = 0x28
	}
	if m.UnbondingAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnbondingAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingCommissionChange != nil {
		{
			size, err := m.PendingCommissionChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *CommissionChangeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionChangeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionChangeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolMembership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMembership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMembership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valaddress) > 0 {
		i -= len(m.Valaddress)
		copy(dAtA[i:], m.Valaddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Valaddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsLeaving {
		i--
		if m.IsLeaving {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Points != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x10
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalFunds != 0 {
		n += 1 + sovQuery(uint64(m.TotalFunds))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *FullStaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	if m.UnbondingAmount != 0 {
		n += 1 + sovQuery(uint64(m.UnbondingAmount))
	}
	if m.DelegatorCount != 0 {
		n += 1 + sovQuery(uint64(m.DelegatorCount))
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovQuery(uint64(m.TotalDelegation))
	}
	return n
}

func (m *StakerMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PendingCommissionChange != nil {
		l = m.PendingCommissionChange.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CommissionChangeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CreationDate != 0 {
		n += 1 + sovQuery(uint64(m.CreationDate))
	}
	return n
}

func (m *PoolMembership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Points != 0 {
		n += 1 + sovQuery(uint64(m.Points))
	}
	if m.IsLeaving {
		n += 2
	}
	l = len(m.Valaddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
			}
			m.TotalFunds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFunds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullStaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullStaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullStaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &StakerMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmount", wireType)
			}
			m.UnbondingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorCount", wireType)
			}
			m.DelegatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &PoolMembership{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCommissionChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingCommissionChange == nil {
				m.PendingCommissionChange = &CommissionChangeEntry{}
			}
			if err := m.PendingCommissionChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommissionChangeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionChangeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMembership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMembership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMembership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &BasicPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeaving", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeaving = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
